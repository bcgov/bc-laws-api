%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 9.0%%For: (Prep Department) (Queen's Printer)%%Title: (BCSigA_P.eps)%%CreationDate: 5/4/04 10:12 PM%%BoundingBox: 113 -489 497 -157%%HiResBoundingBox: 113.7139 -488.9707 496.3984 -157.4888%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 308 -398 308 -398%AI3_TileBox: 0 0 552 728%AI3_DocumentPreview: Macintosh_Pic%AI5_ArtSize: 612 792%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 3%AI8_OpenToView: -316 -14 0.5 634 437 18 1 0 7 42 0 0%AI5_OpenViewLayers: 777%%PageOrigin:0 0%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -33 -30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 128 112 8%%BeginData: 11938 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD3DFFA827FD7DFF5252F87D7DFD7BFF52F8F8F8A8FFFF52FD78FF%52F8F8F87D27F8F8FD78FF52F8F8F827F8277DFD78FFFD04F827A827F8A8%FD77FF52FD06F827FD78FF52FD07F87DFD77FFA8F8F8F8A87D27F8A8FD6F%FFA87DFD06FF7DF8F85252FF27F8FD06FF7DFD69FF7D52FD06FF52277DF8%277D2752FD06FF527DFD68FF27F8A8FD04FF27F827F827F827F82727FD04%FFA8F827FD68FF52F827FFFFFFA8277DF852F8F852277D27A8FFA8FFF8F8%27FD5CFFA8A8FD04FF52FFA8FFFFFF27F8F8A8F8A87D27522727F8F87DF8%7DF8A87D277DF8F852FD5CFF5227FD04FF7D277DFFA8527DFD04F852FFFD%09F827FF7DF827F8F8527D7DFD5AFF27F852FFA8FF7DF87DFF7DFD06F8A8%FF52FD08F852FF7DFD06F8A8FFFFA8FD56FFA827F8F8A852527DF8A8FFFF%7DFD04F827FFFF527D277D277D2752277DFFFF27FD04F8A8FFFFFFA827FF%525252FF27FD50FF5227F827F827F827FD04FFA827F8F8A8FFA8F8F8F827%F827F8F8F852FFFFA8F8F827A8FD04FF7DF827F8F8522727FD51FFF827FD%04F87DFD05FF52F8277DFFFF5227F852F852F8F8F827A8FF2727F87DFD05%FF5227F8F852F8277DFD51FF27FD04F827FD06FFA8F827F87DA87DFD0552%FD04F85227F827F8A8FD05FF2752F827F8F8F87DFD51FFA827FD04F827FD%06FFA82727FD07F852FD06F827277DFD06FF27F8F827F8F8F852FD52FFFD%05F827F8A8FD05FFA87D52FD06F827F82752F8F8F8A8A8FD06FF52FD04F8%272727FD53FFFD04F82727527DFD0AFF52F8F8F85252F827FFA8FD08FF7D%FD06F852FD54FFFD05F87DA8FD0CFF7DFD04F852FD0BFFA87D2727F8F8F8%FD55FF7DFD05F827A8FD04FF52FD07F852275252FD07F827FD05FF27FD04%F87DFD55FFA8FD06F827FD04FF2727525227272752FD04F8FD052752F827%FD04FF27FD05F8A8FD56FFA8FD06F87D527D7D52272752A852F8F852F827%27F8F852277D7D2727A8A8A87DFD05F827FD58FF27FD08F8272727F827F8%527D7D27F8F82727277D7DF8F8272727FD09F8FD57FFA8FD06F8277DF852%5227FD0752F8F82752527DFD04522752F87DFD07F87DFD56FF27FD05F827%A8FFF8A82727FD07F87D52FD07F8272752F8FFA8FD06F827FD55FF7DFD06%F852FF52F8A8272752272727522727F8F8272727522727275227A8F8A8FF%27FD06F87DFD53FFA8FD06F827FFFF27F8FF2727F8F827A8272727F8F852%7D7DF82727F827277DF827FFA827FD05F827A8FD52FF27FD04F82752FFFF%FF52F8FF52277D7D522727F827F8F827F8F8A87D52275227A8F87DFFFFA8%5227FD04F852FD51FF5227FD04F827F8F8A8FFFF27FF2727525252FD0627%5227272752A8A82727A852A8FF7DF8F827FD05F8A8FD51FFFD04F827F8F8%F87DFD04FF522727525227275252F8275252F8275252F82727FD04FF7DF8%F8F852F8F8F827FD51FF52FD04F8A8F8F8F8A8FD04FF27277D52527D7D52%527D7D52527D7D52527D2727FD04FF7DF8F8277DFD04F87DFD50FF7DF8F8%27A8FF52F8F8A8FD04FF7DF8272727F8F8272727522727F8F8272727F852%FD04FFA8F8F852FFA827F8F852FD50FFA8F8F8FFFFFFA852F8F827A8FFFF%7DF827FD04F827F87D52F82727F8F8F852F87DFFFF7D27F8F827A8FFFFA8%27F8FD52FF5227FD06FF7D27F87DFFFFF827F827F8F8A8F87DA8F8A8F8F8%F827F827FFFF7DF8277DA8FD05FF2752FD52FF7DF8FD07FFA8F8F8FFFF7D%F852F8A8F8FF52FFA87DA8F87DF827F87DFFA8F8F8A8FD07FFF852FD52FF%52F8A8FD07FF7D2752FFFF52F82752FFA8FD05FFA87D27F827FFFF52F8A8%FD08FFF87DFD52FF52F87DFD08FF7D5227277D27F852FD08FF52F8277D27%27527DA8FD07FF7DF827FD52FF7DF852FD05FF7D52F8F8F82727F8A827F8%52FD06FF52F827A8F8F82727F8F827A8FD05FF52F8A8FD53FFA8A8FFFFA8%7D27F8F82727FD04F87DA827F8277DFFFF7DF8F827FF7DF8F827F827F8F8%F82752A8FFFF7DA8FD53FF7D52A87D27F8F827F8272727F8F8272752FFFF%7DF8F82727F8277DFFFF7D2727FD05F82727F8F85252A8527DFD53FFFD05%F827F8F8F8277DA8FFFFFFA87DFFFFFF5227F87DA8FFFF7D7DFFFFFFA87D%27F8F827FD06F8A8FD53FF7DFD05F82752FD07FF52F8277DFD06FF7D27F8%7DFD06FFA87DF8F8F827F8F852FD54FFA852F82752A8277DA8A8A8FD04FF%7DFD05F8272727FD04F852FD04FFA87DA87D52A85227F827FD5AFFA8F8F8%27F8A8FD04FF7DFD06F827FD05F8A8FD04FFA8F827F8F8FD5FFF7DF8F8F8%277DFD05FF7DFD0AF87DFD05FFA827F8F8F87DFD5EFFFD05F827FD04FFA8%FFFF7D2727F8F827527DFD07FF27FD04F827A8FD5CFFA852FD05F8FFA8A8%27F8A8FD0BFFF852A8A8FF27F8F8F82727FD5FFFA8F827A8FFFFF8F827F8%A8FD04FF5252FD04FF7DF82727F8FFFFFFF8F87DFD61FF7DA8FFFFFF27FD%04F87DFFA852F8F87DA8FF7DFD04F827FFFFFFA87DFD67FF27F827F8F852%FFF8F8F827F8F8A852FD05F8FD6BFFA8F8F8F8277DFFFF52F8F8F82727FF%FF7DFD04F87DFD6CFFA827F8FFFFFFA8FD04F8A8FFFFFF27F8FFA8FD74FF%F82727F8A8FFFFFFA8FDFCFFFD53FF7D525227522727FD05F82752FD72FF%27F8F827275252272727FD05F87DFD70FF7DF8F852FD07FF52FD04F8FD70%FF52F8F87DFD08FF7DF8F8F852FD6FFF7DF8F852FD09FF27F8F852FD6FFF%52F8F87DFD09FF7DF8F827FD6FFF7DF8F852FD09FF52F8F87DFD6FFF52F8%F87DFD09FF27F8F8A8FFFF7D52FD072752FD05FF527D527DA87D527D527D%527D527D527D527D527D7D7D527D7DFFFFFF7D52FD05F8277DFF7D7D527D%7DFD06FFA8527D527DFD28FF7DF8F852FD08FFA8F8F852FFFFFF52F8F852%527D2727F8F8F8FD04FF52F8F8277DFD0DF827A8A8F8F8F8A8FFFF52F8F8%52527D5252F87DFFA8F8F8F8FD08FFF8F8F852FD28FF52F8F87DFD07FF7D%F8F852FD04FF7DF8F852FFFFFFA852F8F852FFFFFF52F8F87D527D7DA87D%A827F8F8A87DA87DFFFFFFA8F8F8F8FFFF52F8F852FD05FF7D52FFA8F8F8%F8FD08FF27F8F87DFD28FF7DF8F852FD04FFA87D27F8277DFD05FFA8F8F8%7DFD04FFA8F8F827FFFFFF7DF8F852FD06FF27F8F8FD08FFF8F8F8FFFF27%F8F8FD0AFFF8F8F8FD08FF27F8F8A8FD28FF52F8F8FD0427FD04F827A8FD%06FFA8F8F852FD05FFF8F8F8FFFFFF52F8F87DFD06FF27F8F8FD08FFF8F8%F8FFA8F8F8F8FD0AFFF8F8F8FD08FF27F8F8A8FD28FF7DF8F827522727FD%07F87DFD04FFA8F8F87DFD05FFF8F852FFFFFF7DF8F852FD06FF52F8F8FD%08FFF8F8F8FFA8F8F8F8FD0AFFF8F8F8FD08FF52F8F8A8FD28FF52F8F87D%FD05FFA85227F8F8F827A8FFFFA8F8F852FD04FFA8F8F87DFFFFFF52F8F8%7DFD06FF27F8F8FD08FFF8F8F8FFFFF8F8F852FD09FFF8F8F8FD08FF27F8%F8A8FD28FF7DF8F852FD08FF7DF8F8F827FFFF7DF8F87DFD04FF27F852FD%04FF7DF8F852FD06FF52F8F8FD08FFF8F8F8FFFF7DF8F8F852A8FD07FFF8%F8F8FD08FF52F8F87DFD28FF52F8F87DFD09FF7DF8F8F87DFFA8F8F852FF%A8A827F852FD05FF52F8F87DFD06FF27F8F8FD08FFF8F8F8FFFFA827FD04%F852FD06FFF8F8F8527D527D527D527DF8F8F8A8FD28FF7DF8F852FD0AFF%27F8F827FFA8FD06F827A8FD06FF7DF8F852FD06FF52F8F8FD08FFF8F8F8%FD04FF7DFD05F87DFD04FFFD0EF8A8FD28FF52F8F87DFD0AFF52F8F8F8FF%A8F8F85252F8F8F87DFD06FF52F8F87DFD06FF27F8F8FD08FFF8F8F8FD05%FFA827FD04F852FFFFFFF8F8F8FD08FF27F8F8A8FD28FF7DF8F852FD0AFF%7DF8F8F8FFA8F8F87DFF7DF8F8F8A8FD05FF7DF8F852FD06FF27F8F8FD08%FFF8F8F8FD07FFA827F8F8F87DFFFFF8F8F8FD08FF27F8F8A8FD28FF52F8%F87DFD0AFF52F8F8F8FFA8F8F852FFFF52F8F827FD05FF52F8F87DFD06FF%27F8F8FD08FFF8F8F8FD08FFA827F8F8F8FFFFF8F8F8FD08FF27F8F8A8FD%28FF7DF8F852FD0AFF52F8F827FFA8F8F87DFFFFFF27F8F852FD04FF7DF8%F852FD06FF52F8F8FD08FFF8F8F8FD09FFA8F8F8F8A8FFF8F8F8FD08FF52%F8F8A8FD28FF52F8F87DFD0AFFF8F8F852FFA8F8F852FFFFFF7DF8F8F87D%FFFFFF52F8F87DFD06FF27F8F8FD08FFF8F8F8FD0AFF27F8F8A8FFF8F8F8%FD08FF27F8F8A8FD28FF52F8F852FD09FF27F8F8F8A8FF7DF8F87DFD04FF%52F8F827A8FFFF7DF8F852FD06FF27F8F8FD08FFF8F8F8FF7DFD08FF27F8%F8A8FFF8F8F8FD08FF52F8F87DFD1CFFA8A87DA87DA8A8FD05FFF8F8F827%FD07FFA8FD04F87DFFFF7DF8F852FD05FFF8F8F827FFFF52F8F87DFD06FF%F8F8F8FD08FFF8F8F8FFF8A8FD06FFA8F8F827FFFFF8F8F8FD08FF27F8F8%A8FD19FF7D52FD0BF8FFFFFD04F8A8FFFFFFA87D52FD04F87DFFFFFF52F8%F852FD06FFF8F8F87DFF7DF8F852FD06FFF8F8F8A8FD07FFF8F8F8FFF827%7DFD05FF27F8F8FFFFFFF8F8F8FD08FF27F8F87DFD17FF7DFD04F8277D7D%A85252FD04F8FF7DFD0DF852A8FD04FF27F8F8F8FD06FF7DF8F8F87D27F8%F827FD05FFA8F8F8F87DFD06FF7DF8F8F8A8FD04F8525252F8F827FFFFFF%7DF8F8F87DFD07FFF8F8F852FD16FF7DF8F8F87DFD08FF27F8F8FFA87D52%7D527D527D527D527DA8FD07FF527D527DA8FD06FFA8527D527D527D52FD%05FFA87D527D7DFD06FF7D527D52A8FFA8525227F82752A8FD04FF7D527D%52A8FD06FFA87D527D7DFD15FF52F8F8F8A8FD0AFF2727FD6EFF7DF8F8F8%A8FD0CFF27FD6EFFF8F8F8A8FD0DFFA8FD6DFF52F8F852FD7BFFA8F8F8F8%A8FD15FFA87D27FD04F82727A8FD05FF52272727A8FD05FF7D272727A8FD%07FF7D2727277DFF7D2727277DA8FD0AFF52272752FFFF52FD0527F8F8F8%277DFFFFFFA827272752FD07FF52272727FD07FF7DF8F827FD15FF7D27F8%27527D5252F8F8F852FD04FF52F8F827FD06FF7DF8F8F8A8FD07FF7DF8F8%F8A8FFA8FD04F8A8FD09FF7DF8F8F87DFFFF52F8F852527D5227F8F8F852%FFFFFF27F8F852FD07FFFD04F8A8FD06FF27F8F87DFD14FF52F8F852A8FD%04FFA8F8F8F827A8FFFF7DF8F852FD07FFF8F8F8FD09FFF8F8F8FFFFFFFD%04F827FD09FFFD04F87DFFFF7DF8F852FD04FF7DF8F8F8A8FFFF27F8F87D%FD06FFA8FD04F852FD06FF27F8F87DFD13FF7DF8F852FD08FFF8F8F852FF%FF7DF8F87DFD07FFF8F827FD09FFF8F8F8FFFFFFFD05F8A8FD07FF7DFD04%F8A8FFFF52F8F87DFD05FF27F8F852FFFF52F8F8A8FD06FF7DF87DF8F827%FD06FFF8F8F8A8FD12FFA8F8F827A8FD08FF7DF8F8F8A8FFA8F8F852FD07%FFF8F827FD09FFF8F8F8FFFFFFF827F8F8F87DFD07FF27F827F8F87DFFFF%7DF8F852FD05FF27F8F87DFFFF52F8F8A8FD06FFF827FF27F8F8A8FD05FF%F8F8F8FD13FF7DF8F852FD0AFF27F8F852FFA8F8F87DFD07FFF8F852FD09%FFF8F8F8FFFFFFF827A8F8F827FD06FFA8F8A827F8F8A8FFFF52F8F87DFD%05FF27F8F8A8FFFF7DF8F8A8FD05FFA8F87DFF7DF8F87DFD05FFF8F8F8A8%FD12FFF8F8F8A8FD0AFF27F8F827FFA8F8F852FD07FFF8F827FD09FFF8F8%F8FFFFFFF827FF27F8F8A8FD05FF27F8FF27F8F87DFFFF7DF8F852FD04FF%7DF8F87DFFFFFF52F8F8A8FD05FF52F8FFFFA8F8F827FD05FFF8F8F8A8FD%11FFA8F8F8F8A8FD0AFF7DF8F8F8FF7DF8F87DFD07FFF8F852FD09FFF8F8%F8FFFFFFF827FF52F8F87DFD04FFA8F852FF27F8F8A8FFFF52F8F87DFFFF%A87DF8277DFD04FF7DF8F87DFD05FFF852FFFFFF27F8F8A8FD04FFF8F8F8%7DFD11FFA8F8F8F8FD0BFF7DF8F8F8FFA8F8F852FD07FFF8F827FD09FFF8%F8F8FFFFFFF827FFA8F8F827FD04FF7DF8FFFF27F8F87DFFFF7DF8F8F827%F8F8F8277DFD05FF52F8F8A8FD04FF52F87DFFFFFF52F8F87DFD04FF27F8%F827FD11FFA8F8F8F8FD0BFFA8F8F8F8FFA8F8F87DFD07FFF8F852FD09FF%F8F8F8FFFFFFF827FFFF27F8F8A8FFFFFFF852FFFF27F8F8A8FFFF52F8F8%52527D2727F8F8F87DFFFFFF7DF8F8A8FD04FF27F8FD04A87DF8F827FD04%FF27F8F8F8A8FD10FFA8F8F8F8FD0BFF7DF8F8F8FFA8F8F852FD07FFF8F8%27FD09FFF8F8F8FFFFFFF827FFFF7DF8F87DFFFF7DF87DFFFF27F8F87DFF%FF7DF8F852FD04FF7DF8F8F87DFFFF52F8F8A8FFFFFF7DFD0AF8A8FFFFFF%7DF8F8F852FD10FFA8F8F8F8FD0BFFA8F8F8F8FFA8F8F87DFD07FFF8F827%FD09FFF8F8F8FFFFFFF827FFFFFFF8F827FFFF5227FFFFFF27F8F8A8FFFF%52F8F87DFD05FF7DF8F8F8FFFF7DF8F8A8FFFFFF27277DA8A8A87DA852F8%F852FFFFFFA8FD04F8A8FD0FFFA8F8F8F8A8FD0AFF52F8F827FFA8F8F852%FD07FFF8F827FD08FFA8F8F8F8FFFFFFF827FFFFFF52F8F8A8A8F87DFFFF%FF27F8F87DFFFF7DF8F852FD05FFA8F8F8F87DFF52F8F8A8FFFF7DF852FD%07FFF8F8F8FD04FF27F8F8F827FD10FFF8F8F852FD0AFF52F8F852FF7DF8%F87DFD07FFF8F8F8FD08FFA8F8F8F8FFFFFFF827FFFFFFA8F8F87D5227FD%04FF27F8F8A8FFFF52F8F87DFD06FFF8F8F8A8FF7DF8F8A8FFFF27F8FD08%FF7DF8F87DFFFFFFA8FD04F827FD0DFF27A827F8F827FD0AFFF8F8F8A8FF%7DF8F852FD07FFF8F8F8FD08FF7DF8F8F8FFFFFFF827FD04FFFD04F852FD%04FF27F8F87DFFFF7DF8F852FD06FFF8F8F87DFF52F8F8A8FF7DF852FD08%FFA8F8F827FD04FF7DFD04F827A8FD0AFF2727FFA8F8F8F87DFD08FF52F8%F852FFFF52F8F87DFD07FFF8F8F87DFD07FF27F8F8F8FFFF7DF827FD04FF%7DF8F8F8FD05FF27F8F87DFFFF52F8F87DFD05FFA8F8F8F8FFFF52F8F87D%FFF8F8A8FD09FF27F8F8A8FD04FF52FD05F852A8FD06FF7DF8F87DFFFF52%F8F8F8A8FD06FFA827F827A8FFFF52F8F852FD05FFA8A827F8F827A8FD05%FF7DFD04F8FFFF7DF827FD04FFA8F8F827FD05FF27F8F852FFFF52F8F852%FD05FF27F8F852FFFF27F8F8A852F8F8FD0AFF7DF8F827FD05FF52FD06F8%2752527D2727F8F87DFD04FF27F8F8F87DFD04FF7D27F827A8FFFFFF27F8%F87DFFFFFFA852F8A87DF8F8F8277DA8A8A852F827F8F8F8FFFF52F827FD%05FF27F87DFD05FFF8F8F852FFFF27F8F827FFFFFFA827F8F827FFFFFF52%F8F87D27F852FD0BFF27F8F8A8FD05FF7DFD0BF827A8FD06FF7DFD04F827%27F8F8F852A8FFFFFFA8FD0AF8FFFF52FD08F827A8F8F8F8A8A8F8F8F8A8%FD04FF7DF8FD05FFA8FD04F8FFA8FD0AF852A8FFFFFFFD06F852FD0BFF52%F8F827FD07FF7D5227FD04F82752A8FD0AFF7D52272727527DFD07FFA8A8%7DA8A8A87DA8A8A8FFFFFFA852522727277DA8FFA87D527DA8FFA8A87DFD%06FFA8FD06FFA8A87DA8FFFF7D7D527D527D527D7DFD06FFA87DA87DA87D%A8FD0CFFA8A87DFD7FFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_pattern_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)%%Version: 1.1 0%%CreationDate: (03/26/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/@{} def/&{} def/dp{	dup null eq	{		pop		_dp 0 ne		{			0 1 _dp 1 sub _dl mod			{				_da exch get 3 get			} for			_dp 1 sub _dl mod 1 add packedarray			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll			definepattern pop		} if	}	{		_dp 0 ne _dp _dl mod 0 eq and		{			null dp		} if		7 packedarray _da exch _dp _dl mod exch put		_dp _dl mod _da 0 get 4 get 2 packedarray		/_dp _dp 1 add def	} ifelse} def/E{	_ed begin	dup 0 get type /arraytype ne	{		0		{			dup 1 add index type /arraytype eq			{				1 add			}			{				exit			} ifelse		} loop		array astore	} if	/_dd exch def	/_ury exch def	/_urx exch def	/_lly exch def	/_llx exch def	/_n exch def	/_y 0 def	/_dl 4 def	/_dp 0 def	/_da _dl array def	0 1 _dd length 1 sub	{		/_d exch _dd exch get def		0 2 _d length 2 sub		{			/_x exch def			/_c false def			/_r _d _x 1 add get cvlit def			_r _ ne			{				_urx _llx sub _ury _lly sub				[				1 0 0 1 0 0				]				[				/save cvx				_llx neg _lly neg /translate cvx				_c				{					nc /begin cvx				} if				_r dup type /stringtype eq				{					cvx				}				{					{						exec					} /forall cvx				} ifelse				_c				{					/end cvx				} if				/restore cvx				] cvx				/_fn 12 _n length add string def				_y _fn cvs pop				/_y _y 1 add def				_fn 12 _n putinterval				_fn _c false dp				_d exch _x 1 add exch put			} if		} for	} for	null dp	_n _dd /_pd end	xput} def/fc{	_fm dup concatmatrix pop} def/p{	/_fm exch ddef	9 -2 roll _pm translate fc	7 -2 roll _pm scale fc	5 -1 roll _pm rotate fc	4 -2 roll exch 0 ne	{		dup _pm rotate fc		1 -1 _pm scale fc		neg _pm rotate fc	}	{		pop	} ifelse	dup _pm rotate fc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore fc	neg _pm rotate fc	_pd exch get /_fdd exch ddef	/_pf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					patternfill				}				{					pop					fill				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_psf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					9 copy 6 npop patternashow				}				{					pop					6 copy 3 npop hvashow				} ifelse				grestore				pop			} for			pop		} for		restore		sw rmoveto	} ddef	/_pjsf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					12 copy 6 npop patternawidthshow				}				{					pop 9 copy 3 npop hvawidthshow				} ifelse				grestore				pop			} for			pop		} for		restore		swj rmoveto	} ddef	/_lp /none ddef} def/sc{	_sm dup concatmatrix pop} def/P{	/_sm exch ddef	9 -2 roll _pm translate sc	7 -2 roll _pm scale sc	5 -1 roll _pm rotate sc	4 -2 roll exch 0 ne	{		dup _pm rotate sc		1 -1 _pm scale sc		neg _pm rotate sc	}	{		pop	} ifelse	dup _pm rotate sc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore sc	neg _pm rotate sc	_pd exch get /_sdd exch ddef	/_ps	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					patternstroke				}				{					pop stroke				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_pss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					10 copy 6 npop patternashowstroke				}				{					pop 7 copy 3 npop ss				} ifelse				grestore				pop			} for			pop		} for		restore		pop sw rmoveto	} ddef	/_pjss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					13 copy 6 npop patternawidthshowstroke				}				{					pop 10 copy 3 npop jss				} ifelse				grestore				pop			} for			pop		} for		restore		pop swj rmoveto	} ddef	/_lp /none ddef} defenduserdict /Adobe_pattern_AI5 18 dict dup beginput/initialize{	/definepattern where	{		pop		pop pop	}	{	 begin	 begin		Adobe_pattern_AI5 begin		Adobe_pattern_AI5		{			dup xcheck			{				bind			} if			pop pop		} forall		mark		cachestatus 7 1 roll pop pop pop pop exch pop exch		{			{				10000 add				dup 2 index gt				{					exit				} if				dup setcachelimit			} loop		} stopped		cleartomark	 end 				 end	 end				Adobe_pattern_AI5 begin	} ifelse} def/terminate{	currentdict Adobe_pattern_AI5 eq	{	 end	} if} deferrordict/nocurrentpoint{	pop	stop} puterrordict/invalidaccess{	pop	stop} put/patternencoding256 array def0 1 255{	patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{	17 dict begin	/uniform exch def	/cache exch def	/key exch def	/procarray exch def	/mtx exch matrix invertmatrix def	/height exch def	/width exch def	/ctm matrix currentmatrix def	/ptm matrix def	/str 32 string def	/slice 9 dict def	slice /s 1 put	slice /q 256 procarray length div sqrt floor cvi put	slice /b 0 put	/FontBBox	[	0 0 0 0	] def	/FontMatrix mtx matrix copy def	/Encoding patternencoding def	/FontType 3 def	/BuildChar	{		exch	 begin		/setstrokeadjust where {pop true setstrokeadjust} if		slice begin		dup q dup mul mod s idiv /i exch def		dup q dup mul mod s mod /j exch def		q dup mul idiv procarray exch get		/xl j width s div mul def		/xg j 1 add width s div mul def		/yl i height s div mul def		/yg i 1 add height s div mul def		uniform		{			1 1		}		{			width 0 dtransform			dup mul exch dup mul add sqrt dup 1 add exch div			0 height dtransform			dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse		width 0 cache		{			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul			setcachedevice		}		{			setcharwidth		} ifelse		gsave		scale		newpath		xl yl moveto		xg yl lineto		xg yg lineto		xl yg lineto		closepath		clip		newpath	 end	 end		exec		grestore	} def	key currentdict definefont end} def/patterncachesize{	gsave	newpath	0 0 moveto	width 0 lineto	width height lineto	0 height lineto	closepath	patternmatrix setmatrix	pathbbox	exch ceiling 4 -1 roll floor sub 3 1 roll	ceiling exch floor sub	mul 1 add	grestore} def/patterncachelimit{	cachestatus 7 1 roll 6 npop 8 mul} def/patternpath{	exch dup begin	setfont	ctm setmatrix	concat	slice exch /b exch slice /q get dup mul mul put	FontMatrix concat	uniform	{		width 0 dtransform round width div exch round width div exch		0 height dtransform round height div exch height div exch		0 0 transform round exch round exch		ptm astore setmatrix	}	{		ptm currentmatrix pop	} ifelse	{		currentpoint	} stopped not	{		2 npop		pathbbox		true		4 index 3 index eq		4 index 3 index eq		and		{			pop false			{				{					2 npop				}				{					3 npop true				}				{					7 npop true				}				{					pop true				} pathforall			} stopped			{				5 npop true			} if		} if		{			height div ceiling height mul 4 1 roll			width div ceiling width mul 4 1 roll			height div floor height mul 4 1 roll			width div floor width mul 4 1 roll			2 index sub height div ceiling cvi exch			3 index sub width div ceiling cvi exch			4 2 roll moveto			FontMatrix mtx invertmatrix			dup dup 4 get exch 5 get rmoveto			ptm ptm concatmatrix pop			slice /s			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi			dup slice /q get gt			{				pop slice /q get			} if			put			0 1 slice /s get dup mul 1 sub			{				slice /b get add				gsave				0 1 str length 1 sub				{					str exch 2 index put				} for				pop				dup				{					gsave					ptm setmatrix					1 index str length idiv					{						str show					} repeat					1 index str length mod str exch 0 exch getinterval show					grestore					0 height rmoveto				} repeat				grestore			} for			2 npop		}		{			4 npop		} ifelse	} if end} def/patternclip{	_eo {eoclip} {clip} ifelse} def/patternstrokepath{	strokepath} def/patternmatrixmatrix def/patternfill{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternclip	Adobe_pattern_AI5 /patternpath get exec	grestore	newpath} def/patternstroke{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternstrokepath	true	{		{			{				newpath				moveto			}			{				lineto			}			{				curveto			}			{				closepath				3 copy				Adobe_pattern_AI5 /patternfill get exec			} pathforall			3 npop		} stopped		{			5 npop			patternclip			Adobe_pattern_AI5 /patternfill get exec		} if	}	{		patternclip		Adobe_pattern_AI5 /patternfill get exec	} ifelse	grestore	newpath} def/vpatternawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef		{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	3 npop} def/hpatternawidthshow{	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		9 index 9 index 9 index		Adobe_pattern_AI5 /patternfill get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	8 npop} def/patternashow{0 0 0 6 3 rollpatternawidthshow} def/patternawidthshow{	6 index type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get 7 1 roll	} if	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse} def/vpatternawidthshowstroke{	7 1 roll	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			3 index setmatrix			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			4 index setmatrix			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	4 npop} def/hpatternawidthshowstroke{	7 1 roll	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		7 index setmatrix		10 index 10 index 10 index		Adobe_pattern_AI5 /patternstroke get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	9 npop} def/patternashowstroke{	0 0 0 7 3 roll	patternawidthshowstroke} def/patternawidthshowstroke{	7 index type /dicttype eq	{		patternmatrix /patternmatrix get 8 1 roll	} if	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse} defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A89888786858483828180>0 %_Br[0.5 0 50 100 %_BS%_0.5 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_BS%_0 1 0.6 0 1 50 100 Bs0 0 1 0 1 50 0 %_BS%_0 0 1 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666564646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_BS%_0 0.08 0.67 0 1 50 14 Bs1 1 0 0 1 50 100 %_BS%_1 1 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 3.6 w 4 M []0 d0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc1 1 1 1 k(C=100 M=100 Y=100 K=100) Pc1 g(K=0) Pc0 g(K=100) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.75 g(K=25) Pc0.5 g(K=50) Pc0.25 g(K=75) Pc0 g(K=100) PcBb2 (Black & White) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Black & White) Pc0.25 0 0 0 k(C=25 M=0 Y=0 K=0) Pc0.5 0 0 0 k(C=50 M=0 Y=0 K=0) Pc0.75 0 0 0 k(C=75 M=0 Y=0 K=0) Pc1 0 0 0 k(C=100 M=0 Y=0 K=0) Pc0.25 0.25 0 0 k(C=25 M=25 Y=0 K=0) Pc0.5 0.5 0 0 k(C=50 M=50 Y=0 K=0) Pc0.75 0.75 0 0 k(C=75 M=75 Y=0 K=0) Pc1 1 0 0 k(C=100 M=100 Y=0 K=0) PcBb2 (Red & Yellow) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Red & Yellow) Pc0 0.25 0 0 k(C=0 M=25 Y=0 K=0) Pc0 0.5 0 0 k(C=0 M=50 Y=0 K=0) Pc0 0.75 0 0 k(C=0 M=75 Y=0 K=0) Pc0 1 0 0 k(C=0 M=100 Y=0 K=0) Pc0 0.25 0.25 0 k(C=0 M=25 Y=25 K=0) Pc0 0.5 0.5 0 k(C=0 M=50 Y=50 K=0) Pc0 0.75 0.75 0 k(C=0 M=75 Y=75 K=0) Pc0 1 1 0 k(C=0 M=100 Y=100 K=0) PcBb0 0 0 0 Bh2 (Yellow & Blue Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Yellow & Blue Radial) Pc0 0 0.25 0 k(C=0 M=0 Y=25 K=0) Pc0 0 0.5 0 k(C=0 M=0 Y=50 K=0) Pc0 0 0.75 0 k(C=0 M=0 Y=75 K=0) Pc0 0 1 0 k(C=0 M=0 Y=100 K=0) Pc0.25 0 0.25 0 k(C=25 M=0 Y=25 K=0) Pc0.5 0 0.5 0 k(C=50 M=0 Y=50 K=0) Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0) Pc1 0 1 0 k(C=100 M=0 Y=100 K=0) Pc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Yellow Stripe) Pc0.25 0.125 0 0 k(C=25 M=13 Y=0 K=0) Pc0.5 0.25 0 0 k(C=50 M=25 Y=0 K=0) Pc0.75 0.375 0 0 k(C=75 M=38 Y=0 K=0) Pc1 0.5 0 0 k(C=100 M=50 Y=0 K=0) Pc0.125 0.25 0 0 k(C=13 M=25 Y=0 K=0) Pc0.25 0.5 0 0 k(C=25 M=50 Y=0 K=0) Pc0.375 0.75 0 0 k(C=38 M=75 Y=0 K=0) Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0 0.25 0.125 0 k(C=0 M=25 Y=13 K=0) Pc0 0.5 0.25 0 k(C=0 M=50 Y=25 K=0) Pc0 0.75 0.375 0 k(C=0 M=75 Y=38 K=0) Pc0 1 0.5 0 k(C=0 M=100 Y=50 K=0) Pc0 0.125 0.25 0 k(C=0 M=13 Y=25 K=0) Pc0 0.25 0.5 0 k(C=0 M=25 Y=50 K=0) Pc0 0.375 0.75 0 k(C=0 M=38 Y=75 K=0) Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0 0.25 0 k(C=13 M=0 Y=25 K=0) Pc0.25 0 0.5 0 k(C=25 M=0 Y=50 K=0) Pc0.375 0 0.75 0 k(C=38 M=0 Y=75 K=0) Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0) Pc0.25 0 0.125 0 k(C=25 M=0 Y=13 K=0) Pc0.5 0 0.25 0 k(C=50 M=0 Y=25 K=0) Pc0.75 0 0.375 0 k(C=75 M=0 Y=38 K=0) Pc1 0 0.5 0 k(C=100 M=0 Y=50 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.25 0.125 0.125 0 k(C=25 M=13 Y=13 K=0) Pc0.5 0.25 0.25 0 k(C=50 M=25 Y=25 K=0) Pc0.75 0.375 0.375 0 k(C=75 M=38 Y=38 K=0) Pc1 0.5 0.5 0 k(C=100 M=50 Y=50 K=0) Pc0.25 0.25 0.125 0 k(C=25 M=25 Y=13 K=0) Pc0.5 0.5 0.25 0 k(C=50 M=50 Y=25 K=0) Pc0.75 0.75 0.375 0 k(C=75 M=75 Y=38 K=0) Pc1 1 0.5 0 k(C=100 M=100 Y=50 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0.25 0.125 0 k(C=13 M=25 Y=13 K=0) Pc0.25 0.5 0.25 0 k(C=25 M=50 Y=25 K=0) Pc0.375 0.75 0.375 0 k(C=38 M=75 Y=38 K=0) Pc0.5 1 0.5 0 k(C=50 M=100 Y=50 K=0) Pc0.125 0.25 0.25 0 k(C=13 M=25 Y=25 K=0) Pc0.25 0.5 0.5 0 k(C=25 M=50 Y=50 K=0) Pc0.375 0.75 0.75 0 k(C=38 M=75 Y=75 K=0) Pc0.5 1 1 0 k(C=50 M=100 Y=100 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0.125 0.25 0 k(C=13 M=13 Y=25 K=0) Pc0.25 0.25 0.5 0 k(C=25 M=25 Y=50 K=0) Pc0.375 0.375 0.75 0 k(C=38 M=38 Y=75 K=0) Pc0.5 0.5 1 0 k(C=50 M=50 Y=100 K=0) Pc0.25 0.125 0.25 0 k(C=25 M=13 Y=25 K=0) Pc0.5 0.25 0.5 0 k(C=50 M=25 Y=50 K=0) Pc0.75 0.375 0.75 0 k(C=75 M=38 Y=75 K=0) Pc1 0.5 1 0 k(C=100 M=50 Y=100 K=0) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 4 255 255 79 0 100 Lb(Layer 2) Ln0 ALB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 Au*u0 O0 g0 J 0 j 1 w 4 M []0 d0 XR273.8887 -407.3267 m276.4351 -410.751 277.6646 -412.1563 281.2646 -415.4927 c274.0645 -415.4927 L270.2886 -415.4927 268.6206 -413.4731 266.6885 -410.6636 c255.9756 -395.3848 L252.2881 -390.1162 251.6733 -388.6235 246.5806 -388.1846 c246.5806 -403.9902 L246.5806 -407.9414 246.5806 -412.5073 248.5122 -415.4927 c236.3071 -415.4927 L238.8535 -411.4536 238.6777 -407.2388 238.6777 -403.4634 c238.6777 -370.9741 L238.6777 -367.0229 238.6777 -362.457 236.7461 -359.4712 c244.1216 -359.4712 251.1465 -358.5933 257.9956 -358.5933 c266.9521 -358.5933 271.6055 -363.5107 271.6055 -370.3594 c271.6055 -378.438 264.9321 -383.7065 258.6104 -386.2529 C273.8887 -407.3267 lf1 D246.5806 -384.7598 m247.8975 -384.9355 249.2148 -385.0234 250.5317 -385.0234 c259.0493 -385.0234 263.7031 -380.4575 263.7031 -372.1157 c263.7031 -363.335 258.6982 -362.2813 250.8833 -362.1055 c246.7563 -362.1055 L246.6685 -363.4229 246.5806 -364.9155 246.5806 -366.3203 C246.5806 -384.7598 lf*U*u0 D283.1846 -370.9741 m283.1846 -367.0229 283.1846 -362.457 281.2529 -359.4712 c293.019 -359.4712 L291.0869 -362.457 291.0869 -367.0229 291.0869 -370.9741 c291.0869 -403.9902 L291.0869 -407.9414 291.0869 -412.5073 293.019 -415.4927 c281.2529 -415.4927 L283.1846 -412.5073 283.1846 -407.9414 283.1846 -403.9902 C283.1846 -370.9741 lf*U*u309.8594 -415.4927 m311.791 -412.5073 311.791 -407.9414 311.791 -403.9902 c311.791 -363.8618 L300.1128 -363.8618 L298.0933 -363.8618 296.0737 -364.125 293.8784 -365.7935 c295.6343 -359.4712 L339.8018 -359.4712 L338.3091 -363.2471 332.9526 -363.8618 329.353 -363.8618 c319.6938 -363.8618 L319.6938 -403.9902 L319.6938 -407.9414 319.6938 -412.5073 321.626 -415.4927 C309.8594 -415.4927 lf*U*u344.2686 -370.9741 m344.2686 -367.0229 344.2686 -362.457 342.3364 -359.4712 c354.1025 -359.4712 L352.1709 -362.457 352.1709 -367.0229 352.1709 -370.9741 c352.1709 -403.9902 L352.1709 -407.9414 352.1709 -412.5073 354.1025 -415.4927 c342.3364 -415.4927 L344.2686 -412.5073 344.2686 -407.9414 344.2686 -403.9902 C344.2686 -370.9741 lf*U*u356.5425 -404.5166 m359.1768 -408.2046 362.9526 -413.3853 372.1729 -413.3853 c378.8462 -413.3853 383.8511 -409.4341 383.8511 -402.4097 c383.8511 -387.6577 358.7378 -389.502 358.7378 -373.2573 c358.7378 -363.0713 367.0796 -358.0664 376.3872 -358.0664 c380.9536 -358.0664 385.4316 -358.5933 389.9097 -358.5933 c389.9097 -366.7593 L385.9585 -362.6323 383.5874 -361.5786 377.7046 -361.5786 c371.5581 -361.5786 366.9917 -364.6519 366.9917 -371.2378 c366.9917 -384.7598 392.105 -383.0918 392.105 -399.8628 c392.105 -410.751 381.48 -416.8979 371.6455 -416.8979 c367.3433 -416.8979 360.582 -415.4927 356.5425 -413.8247 C356.5425 -404.5166 lf*U*u431.9658 -370.9741 m431.9658 -367.0229 431.8779 -362.9834 429.9458 -359.4712 c441.8877 -359.4712 L439.9561 -362.9834 439.8682 -367.0229 439.8682 -370.9741 c439.8682 -403.9902 L439.8682 -407.9414 439.9561 -411.9805 441.8877 -415.4927 c429.9458 -415.4927 L431.8779 -411.9805 431.9658 -407.9414 431.9658 -403.9902 c431.9658 -387.043 L405.9746 -387.043 L405.9746 -403.9902 L405.9746 -407.9414 406.0625 -411.9805 407.9941 -415.4927 c396.0522 -415.4927 L397.9839 -411.9805 398.0718 -407.9414 398.0718 -403.9902 c398.0718 -370.9741 L398.0718 -367.0229 397.9839 -362.9834 396.0522 -359.4712 c407.9941 -359.4712 L406.0625 -362.9834 405.9746 -367.0229 405.9746 -370.9741 c405.9746 -383.5308 L431.9658 -383.5308 L431.9658 -370.9741 lf*U*u205.314 -488.4438 m186.8745 -488.4438 178.7964 -475.7993 178.7964 -460.1699 c178.7964 -443.4863 188.4551 -429.6128 206.7188 -429.6128 c225.1587 -429.6128 233.2373 -442.2568 233.2373 -457.8867 c233.2373 -474.5703 223.5786 -488.4438 205.314 -488.4438 cf1 D206.0166 -433.4761 m193.3726 -433.4761 187.9282 -445.0669 187.9282 -457.7109 c187.9282 -469.3018 191.8794 -484.5801 206.0166 -484.5801 c218.6611 -484.5801 224.105 -472.9897 224.105 -460.3452 c224.105 -448.7544 220.1538 -433.4761 206.0166 -433.4761 cf*U*u0 D238.5762 -442.52 m238.5762 -438.5693 238.5762 -434.0029 236.6445 -431.0176 c248.4111 -431.0176 L246.479 -434.0029 246.479 -438.5693 246.479 -442.52 c246.479 -483.5264 L253.1528 -483.5264 L258.0698 -483.5264 262.5479 -482.8242 266.9385 -478.5215 c265.27 -486.7754 L263.5142 -486.9512 261.6699 -487.0391 259.9136 -487.0391 c235.5908 -487.0391 L238.2251 -483.6143 238.5762 -471.2334 238.5762 -467.1064 C238.5762 -442.52 lf*U*u315.2134 -431.0176 m313.2813 -434.0908 313.2813 -438.6567 313.2813 -442.6079 c313.2813 -475.624 L313.2813 -479.5752 313.2813 -484.1411 315.2134 -487.0391 c304.7642 -487.5659 L305.1152 -481.7705 L305.1152 -481.5073 304.9399 -481.4189 304.6763 -481.4189 c304.5005 -481.4189 304.1494 -481.9458 303.6226 -482.3853 c300.1982 -485.2827 294.8418 -488.4438 286.6758 -488.4438 c276.4902 -488.4438 269.729 -484.3169 269.4653 -473.5166 c269.4653 -442.6079 L269.4653 -438.6567 269.4653 -434.0908 267.5332 -431.0176 c279.2998 -431.0176 L277.3682 -434.0908 277.3682 -438.6567 277.3682 -442.6079 c277.3682 -468.248 L277.6313 -477.6436 281.4951 -483.3511 291.4175 -483.3511 c301.603 -483.3511 304.7642 -476.9409 305.0273 -466.4917 c305.1152 -463.1553 305.3789 -459.7305 305.3789 -456.394 c305.3789 -442.6079 L305.3789 -438.6567 305.3789 -434.0908 303.4468 -431.0176 C315.2134 -431.0176 lf*U*u378.7813 -431.0176 m376.7617 -434.354 377.0254 -439.0957 377.0254 -443.4863 c377.0254 -454.0234 376.5864 -464.999 377.7275 -475.5361 c378.167 -479.4873 378.5181 -483.5264 380.4497 -487.0391 c367.542 -487.0391 L369.1226 -482.6484 369.1226 -476.1509 369.1226 -471.2334 c369.1226 -442.0811 L369.1226 -441.2031 369.1226 -440.1494 368.5078 -440.1494 c367.8931 -440.1494 367.6299 -440.7642 367.3667 -441.4668 c347.6973 -487.917 L331.0142 -444.8032 L330.0479 -442.2568 329.4336 -440.1494 328.6431 -440.1494 c327.853 -440.1494 327.853 -441.73 327.853 -443.0469 c327.7651 -471.5845 L327.7651 -478.4336 327.7651 -484.1411 329.6968 -487.0391 c319.2476 -487.0391 L320.0381 -485.8975 L323.2871 -481.2437 323.6382 -467.3701 323.6382 -457.8867 c323.6382 -435.9346 L323.6382 -433.564 323.5503 -432.3345 321.4429 -431.0176 c332.3311 -431.0176 L333.3848 -431.0176 334.7021 -431.1934 335.0532 -432.3345 c348.0488 -470.6191 L348.4878 -471.936 348.751 -473.4287 349.4536 -473.4287 c350.2437 -473.4287 350.5073 -472.5508 351.0342 -471.3213 c366.2251 -434.7056 L367.0151 -432.8613 367.6299 -431.0176 369.8252 -431.0176 C378.7813 -431.0176 lf*U*u387.9829 -442.52 m387.9829 -438.5693 387.9829 -434.0029 386.0508 -431.0176 c393.7783 -431.0176 401.6807 -430.1396 409.4077 -430.1396 c416.2568 -430.1396 422.4912 -433.125 422.4912 -440.7642 c422.4912 -448.4033 416.4326 -452.0913 410.1982 -454.7256 c410.1982 -454.9014 L418.3643 -456.7451 425.3887 -459.9941 425.3887 -469.4775 c425.3887 -483.3511 414.8521 -487.3901 402.9102 -487.3901 c396.939 -487.3901 391.0562 -487.0391 385.085 -487.0391 c387.9829 -480.8047 387.9829 -471.7603 387.9829 -464.999 C387.9829 -442.52 lf1 D395.8857 -454.4619 m398.2563 -454.4619 L405.9834 -454.4619 413.8857 -452.0034 413.8857 -442.6958 c413.8857 -434.793 408.5298 -433.6514 401.3296 -433.6514 c399.6611 -433.6514 397.8174 -433.8271 395.8857 -434.0029 C395.8857 -454.4619 lf395.8857 -471.4971 m395.8857 -481.6826 395.8857 -483.8779 401.7686 -483.8779 c410.7251 -483.8779 416.2568 -480.3657 416.2568 -470.9702 c416.2568 -458.9404 407.4761 -457.623 397.3784 -457.623 c395.8857 -457.623 L395.8857 -471.4971 lf*U*u0 D432.1416 -442.52 m432.1416 -438.5693 432.1416 -434.0029 430.21 -431.0176 c441.9761 -431.0176 L440.0444 -434.0029 440.0444 -438.5693 440.0444 -442.52 c440.0444 -475.5361 L440.0444 -479.4873 440.0444 -484.0532 441.9761 -487.0391 c430.21 -487.0391 L432.1416 -484.0532 432.1416 -479.4873 432.1416 -475.5361 C432.1416 -442.52 lf*U*u486.915 -487.0391 m477.3442 -462.4526 L457.5874 -462.4526 L453.8115 -470.0918 449.8604 -478.6973 449.8604 -483.7021 c449.8604 -484.8438 449.9482 -485.8975 450.1235 -487.0391 c439.1475 -487.0391 L441.0796 -484.5801 L446.0845 -478.2583 464.1729 -440.5884 464.1729 -433.3882 c464.2607 -431.0176 L474.6221 -431.0176 L480.2417 -448.4912 485.8613 -467.5454 494.6421 -483.79 c496.3984 -487.0391 L486.915 -487.0391 lf1 D469.7046 -440.1494 m469.5293 -439.5347 469.0024 -438.042 468.2119 -438.042 c467.4219 -438.042 466.895 -439.7104 466.7192 -440.1494 c459.0801 -458.9404 L475.8511 -458.9404 L469.7046 -440.1494 lf*U*u0 D181.603 -354.2813 m181.603 -348.8486 181.9995 -342.5703 179.3438 -338.4653 c189.9683 -338.4653 200.4375 -337.2578 211.062 -337.2578 c220.479 -337.2578 229.0513 -341.3628 229.0513 -351.8667 c229.0513 -362.3706 220.7207 -367.4414 212.1484 -371.063 c212.1484 -371.3047 L223.3765 -373.8398 233.0352 -378.3071 233.0352 -391.3462 c233.0352 -410.4219 218.5474 -415.9756 202.1279 -415.9756 c193.918 -415.9756 186.2251 -415.4927 178.0156 -415.4927 c181.9995 -406.9209 181.603 -394.4854 181.603 -385.189 C181.603 -354.2813 lf1 D189.7568 -370.9751 m193.0166 -370.9751 L203.6406 -370.9751 220.3008 -368.1343 220.3008 -354.5225 c220.3008 -342.5239 207.1655 -341.2939 197.2651 -341.2939 c194.9712 -341.2939 192.436 -341.3374 189.7798 -341.5786 C189.7568 -370.9751 lf189.8174 -394.123 m189.6768 -411.6309 189.7183 -411.9395 197.8076 -411.9395 c210.1221 -411.9395 223.5532 -407.1592 223.5532 -393.3989 c223.5532 -375.8579 205.6548 -374.75 191.7705 -374.75 c189.8174 -374.75 L189.8174 -394.123 lf*U*u0 D172.5107 -424.2578 m172.1489 -424.2578 L169.251 -419.0664 165.146 -412.103 152.7109 -412.103 c133.7559 -412.103 122.6401 -428.9663 122.6401 -446.1104 c122.6401 -465.0654 135.9287 -482.1743 155.729 -482.1743 c166.1123 -482.1743 173.1147 -475.3276 176.6162 -471.4644 c176.6162 -472.189 L176.6162 -477.6216 167.9233 -488.9707 149.0889 -488.9707 c127.1157 -488.9707 113.5933 -471.585 113.7139 -449.4912 c113.7139 -424.7407 128.3228 -408.0796 152.8315 -408.0796 c159.834 -408.0796 164.9048 -409.0454 172.9941 -409.0454 C172.5107 -424.2578 lf*UULB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 100 Lb(New Stuff) Ln0 A0 O0 g0 J 0 j 0.011 w 4 M []0 d0 XR256.8223 -254.7529 m262.0498 -258.6738 261.8271 -259.7612 260.4307 -262.2373 c259.4087 -264.0483 257.9546 -265.7925 259.9229 -267.062 c261.8906 -268.332 265.5098 -270.3633 268.0493 -270.9346 c269.5571 -271.2744 270.7793 -273.1992 271.2866 -274.4053 c271.9478 -275.9756 272.7681 -278.2568 274.0166 -279.8862 c274.21 -280.1382 270.8174 -279.7642 269.7207 -279.2305 c268.6074 -278.6885 268.0703 -278.6377 267.7739 -277.1987 c267.4282 -275.52 265.7212 -275.9077 265.7847 -275.4634 c265.876 -274.8228 266.6313 -274.1514 266.1655 -273.7705 c265.4971 -273.2236 263.9224 -272.7124 260.6211 -271.3794 c257.3198 -270.0459 255.0381 -269.4595 254.082 -269.2207 c252.812 -268.9033 252.8755 -268.5225 252.812 -266.8081 c252.7485 -265.0938 252.4312 -263.7607 251.8599 -263.2529 c251.2886 -262.7451 251.4155 -262.3643 251.5425 -261.7925 c251.6694 -261.2212 251.6694 -261.4751 251.7964 -260.396 c251.9233 -259.3169 251.3521 -258.1104 252.939 -256.9043 c254.5264 -255.6982 256.5684 -254.5625 256.8223 -254.7529 cf*u0.1 w257.0317 -224.939 m257.0479 -225.082 257.0776 -225.167 256.9209 -225.3677 c256.127 -226.3833 253.4385 -225.4785 252.519 -225.3252 c251.249 -225.1138 250.9106 -225.833 y249.2603 -228.0767 255.3193 -228.3682 256.7744 -228.7866 c260.2793 -229.7939 261.5493 -232.3018 262.2715 -233.8408 c262.9751 -235.3394 263.0093 -237.9995 264.2109 -237.7251 c265.6919 -237.3862 269.9326 -236.8882 y273.0435 -236.5073 273.707 -237.5688 273.9688 -238.1191 c274.1045 -238.4038 274.2739 -239.2075 273.9956 -240.0625 c273.7451 -240.832 272.5898 -244.7539 272.4717 -245.5859 c271.9443 -249.3062 272.0317 -255.4702 272.2847 -257.3584 c272.4004 -258.2236 272.6577 -258.7466 271.8423 -258.2886 c268.8081 -256.5845 268.5059 -255.4966 267.8374 -254.6011 c267.0205 -253.5059 268.4722 -253.1406 267.0713 -251.4214 c266.521 -250.7466 267.1792 -249.9678 267.7739 -249.522 c268.2817 -249.1411 267.981 -249.2383 269.0679 -247.5034 c269.3247 -247.0933 269.6436 -243.2158 269.6602 -242.9746 c269.7876 -241.1548 268.3481 -240.7314 267.52 -241.1416 c266.3281 -241.7319 266.105 -242.6782 265.1738 -243.5249 c263.5327 -245.0171 262.4229 -245.3027 y260.3491 -253.3442 255.373 -253.2432 253.5107 -254.5132 c251.6484 -255.7827 250.1245 -256.5444 250.3359 -259.3804 c250.5537 -262.2974 249.3628 -263.1895 248.6011 -263.8667 c247.8389 -264.5439 242.7603 -267.8872 242.083 -268.353 c240.7573 -269.2646 241.2363 -269.3267 241.1519 -270.2573 c240.9629 -272.334 242.8022 -282.9126 244.1143 -285.9175 c244.4634 -286.7173 244.855 -287.1494 243.9453 -286.9336 c240.5591 -286.1294 240.3052 -285.5366 239.4165 -284.8594 c238.3296 -284.0317 239.5435 -282.4258 237.4697 -281.6431 c236.2549 -281.1841 237.7861 -280.4526 238.1045 -278.6802 c239.4165 -271.3794 235.2261 -266.8716 234.7188 -265.9404 c234.2104 -265.0093 233.9551 -265.0078 234.8452 -264.2051 c237.8506 -261.4966 238.3374 -257.3486 y235.6074 -259.063 233.9141 -258.2798 y234.2104 -257.8989 234.2954 -257.8145 235.1841 -257.0522 c236.0728 -256.2905 237.0674 -253.0313 239.48 -251.5078 c241.0781 -250.4985 247.543 -243.064 246.8442 -240.334 c246.5454 -237.9512 245.3027 -236.605 v241.2393 -232.2031 240.1333 -227.917 240.0122 -227.3359 c239.1655 -223.2725 240.3452 -219.0967 240.5996 -218.8003 c240.853 -218.5039 240.9492 -218.4419 240.4565 -218.2925 c237.1157 -217.2778 237.2856 -215.1499 236.7446 -214.3594 c236.2041 -213.5693 235.8999 -211.0576 y236.228 -211.3774 237.0542 -211.791 238.2896 -212.3242 c239.5244 -212.8569 240.729 -212.2065 242.1709 -214.0459 c242.8877 -214.9604 242.9961 -214.6172 y243.1177 -214.5449 243.5249 -213.9082 243.6309 -213.8555 c243.7417 -213.9824 242.7417 -212.8394 v241.8442 -211.814 239.5464 -210.4482 237.5996 -210.1099 c236.689 -209.9512 235.0972 -209.7393 233.8696 -208.4272 c233.5625 -208.0986 232.5205 -206.1733 y234.2827 -207.0625 234.6318 -207.2368 v235.2241 -207.5332 235.4004 -207.5464 236.187 -207.6338 c236.3301 -207.6494 236.3301 -207.6177 236.2349 -207.4839 c235.7002 -206.7319 234.5361 -204.9341 234.3301 -203.7451 c233.896 -201.2427 234.2793 -198.6841 y234.7427 -199.4932 234.9966 -200.2266 v235.3125 -201.1387 235.5469 -203.1895 236.605 -203.4434 c237.0576 -203.5522 236.6895 -201.9199 237.4512 -200.269 c237.9595 -199.1689 238.0439 -197.8989 y239.1021 -200.396 238.8057 -202.3008 v238.6694 -203.1792 238.0928 -207.1704 240.4141 -208.0991 c240.626 -208.1841 240.0757 -207.126 240.2871 -205.729 c240.4058 -204.9468 240.0332 -203.0625 y241.98 -205.3481 242.3188 -207.4219 v242.521 -208.6611 243.6729 -209.228 244.2656 -210.2153 c244.5498 -210.689 245.2485 -212.1152 245.6201 -211.9082 c246.3818 -211.4854 245.3491 -210.333 245.5776 -207.6338 c245.7896 -205.1367 247.0166 -204.417 y246.7207 -206.8296 247.5669 -208.8188 v247.9053 -209.6133 248.1157 -212.4966 248.3286 -212.4165 c248.6675 -212.2896 248.8311 -212.3003 249.1753 -210.3354 c249.3447 -209.3691 249.2886 -208.6528 249.3872 -207.6338 c249.5137 -206.3218 250.8682 -205.2212 y250.4873 -207.5493 250.7944 -209.1875 v250.9624 -210.0854 251.1602 -211.4819 251.937 -209.7373 c254.2119 -204.6289 254.0425 -202.4277 253.1113 -199.5781 c252.9702 -199.1445 252.2227 -197.73 y253.4785 -197.9766 254.2969 -198.9995 v255.1431 -200.0576 255.5884 -202.5747 255.7778 -202.3853 c256.0317 -202.1313 256.7515 -201.1582 257.2168 -200.0151 c257.3872 -199.5981 258.0635 -198.6187 y258.1094 -199.2202 258.1479 -200.0156 v258.1797 -200.6621 257.6826 -202.8086 257.3862 -203.2319 c257.0898 -203.6553 254.5518 -207.0532 255.1431 -207.7183 c255.4819 -208.0991 256.127 -207.3374 256.667 -206.5332 c256.8896 -206.2017 258.3174 -204.5439 y258.021 -207.8877 256.582 -209.2842 v256.2593 -209.5977 254.9526 -210.9561 254.2119 -211.189 c253.585 -211.3857 251.7837 -212.8267 251.9634 -212.9668 c252.249 -213.189 252.4106 -212.5703 253.4502 -212.6279 c254.2119 -212.6704 255.7778 -211.8662 y254.9736 -213.9399 253.0693 -214.5747 v252.5229 -214.7568 250.9531 -214.8291 y253.5981 -215.2734 255.1431 -217.3047 255.6509 -218.5747 c256.2183 -219.9927 260.2222 -221.0596 260.2222 -221.749 c260.2222 -222.0664 259.3755 -222.6587 259.1636 -222.8281 c258.1924 -223.605 257.5977 -223.04 256.7939 -222.7861 c255.8735 -222.4951 255.7778 -221.0928 254.7197 -221.4316 c254.4126 -221.5298 253.8628 -222.0479 253.7622 -222.7012 c253.75 -222.7817 253.7305 -223.1616 Y253.9844 -223.1191 255.1855 -223.1245 256.5396 -223.7168 c257.3721 -224.0811 259.6719 -224.1826 260.1377 -224.0557 c260.603 -223.9287 261.5762 -223.6323 261.7881 -223.2515 c261.9995 -222.8706 261.6338 -223.9834 261.2803 -224.394 c260.8252 -224.9233 259.873 -225.3677 259.0371 -225.2832 c258.5771 -225.2363 257.0317 -224.939 Yf373.752 -257.0703 m374.6411 -257.832 374.7256 -257.9165 375.022 -258.2974 c374.5566 -259.5039 371.8267 -257.7896 v372.2129 -261.4966 375.2178 -264.2051 v376.1079 -265.0078 375.8525 -265.0093 375.3447 -265.9404 c374.8369 -266.8716 370.647 -271.3794 371.959 -278.6802 c372.2773 -280.4526 373.8081 -281.1841 372.5938 -281.6431 c370.52 -282.4258 371.7334 -284.0317 370.647 -284.8594 c369.7578 -285.5366 369.5039 -286.1294 366.1182 -286.9336 c365.2085 -287.1494 365.5996 -286.7173 365.9487 -285.9175 c367.2607 -282.9126 369.1001 -272.334 368.9116 -270.2573 c368.8267 -269.3267 369.3062 -269.2646 367.98 -268.353 c367.3032 -267.8872 362.2241 -264.5439 361.4624 -263.8667 c360.7007 -263.1895 359.5093 -262.2974 359.7271 -259.3804 c359.9385 -256.5444 358.415 -255.7827 356.5527 -254.5132 c354.6904 -253.2432 347.9712 -252.4741 346.7017 -245.1094 c346.6758 -244.959 342.8843 -241.4214 342.0566 -241.1758 c341.229 -240.9302 340.2153 -242.0327 340.0459 -242.959 c340.0024 -243.1968 340.1724 -246.8145 340.7236 -247.7788 c341.7393 -249.5562 341.083 -249.3643 341.5908 -249.7451 c342.1855 -250.1909 343.5566 -250.7588 342.9922 -251.4214 c341.3369 -253.3638 342.8218 -253.9546 342.0044 -255.0498 c341.3364 -255.9448 341.2549 -256.5845 338.2207 -258.2886 c337.4053 -258.7466 337.6626 -258.2236 337.7788 -257.3584 c338.0317 -255.4702 337.8545 -251.0605 337.3267 -247.3403 c337.209 -246.5083 335.8433 -240.519 335.7573 -239.7139 c335.6714 -238.9092 335.6714 -238.5591 336.0942 -238.1191 c336.5166 -237.6797 337.353 -237.5674 338.2227 -237.5488 c344.3711 -237.3862 345.8525 -237.7251 V346.0718 -237.77 L347.1987 -234.2256 349.3999 -230.501 357.1611 -227.9087 c358.0771 -227.6025 359.1079 -226.3003 357.2456 -226.5542 c355.2988 -227.189 354.3677 -227.2314 v353.4365 -227.2734 352.2451 -226.6294 351.2354 -227.062 c350.5693 -227.3477 349.2607 -227.0923 348.3574 -225.877 c346.1567 -222.9141 352.5054 -221.4751 354.1138 -219.0205 c354.7402 -218.0635 355.9761 -215.7188 358.5156 -214.7031 c358.7163 -214.5869 l358.8232 -213.668 358.8438 -213.5078 v359.8594 -205.4766 366.6841 -206.1748 368.271 -206.8096 c369.4653 -207.2876 371.1982 -208.377 y370.3188 -208.8276 369.8594 -209.0557 v368.0029 -209.9775 365.8984 -211.0225 364.7666 -212.3682 c363.0562 -214.4023 362.5752 -216.6533 363.3379 -219.0576 c363.9668 -221.0425 366.1577 -223.6973 369.5713 -223.7441 C369.5713 -223.7441 L368.6313 -225.6143 363.6006 -232.0518 364.1025 -238.4893 c364.4189 -242.5547 369.2813 -250.6821 370.6836 -251.9487 c372.6519 -253.7266 372.8633 -256.3081 373.752 -257.0703 c374.6411 -257.832 374.7256 -257.9165 375.022 -258.2974 c374.5566 -259.5039 371.8267 -257.7896 vF1 D357.0942 -219.1992 m357.812 -219.8438 358.2563 -219.9072 358.7959 -219.7329 c359.3354 -219.5581 359.5894 -219.0503 359.6846 -218.3359 c358.8647 -218.0576 358.2612 -218.2798 v357.6587 -218.502 357.0942 -219.1992 yf251.8257 -218.2798 m251.2227 -218.0576 250.4028 -218.3359 y250.498 -219.0503 250.752 -219.5581 251.2915 -219.7329 c251.8311 -219.9072 252.2759 -219.8438 252.9932 -219.1992 c252.4292 -218.502 251.8257 -218.2798 vf*U*u0 D0.011 w374.7471 -213.1265 m377.4238 -220.396 371.1177 -222.0254 v367.5283 -222.9526 365.3403 -220.3325 364.79 -218.5972 c363.9756 -216.0278 365.1499 -214.2798 365.9326 -213.3486 c367.4756 -211.5142 371.8584 -210.0474 373.2974 -208.8623 c374.7363 -207.6777 375.4561 -205.561 375.731 -205.561 c375.9214 -205.561 376.916 -206.6826 376.7466 -207.6563 c376.4707 -209.2427 376.1118 -210.5557 374.3975 -211.5713 c372.6362 -212.6152 368.6748 -215.3203 368.3667 -216.1421 c367.7949 -217.666 369.1626 -219.0869 370.6729 -218.2588 c371.9854 -217.5391 371.3716 -215.8882 370.7158 -215.5498 c372.1758 -214.5234 372.5249 -214.3486 v372.6807 -214.271 374.3599 -213.3804 374.7471 -213.1265 cf*U353.3203 -217.4736 m353.3086 -217.2354 353.3066 -217.1265 v353.2588 -214.73 355.5894 -210.7393 355.8911 -208.8994 c356.1934 -207.0601 355.3398 -204.9941 355.5469 -204.8125 c355.6904 -204.6875 357.1777 -204.8755 357.6914 -205.7197 c358.5293 -207.0952 359.124 -208.3188 358.5039 -210.2124 c358.2441 -211.0054 357.8911 -212.2471 357.585 -213.4956 C357.5791 -213.5229 L357.5898 -213.5078 L356.0503 -214.1426 354.9692 -215.1221 354.1772 -216.0605 C353.9551 -216.3804 353.416 -217.2813 353.3203 -217.4736 cf353.1772 -254.7212 m347.9497 -258.6416 348.2358 -259.7612 349.6323 -262.2373 c350.6543 -264.0483 352.1084 -265.7925 350.1406 -267.062 c348.1724 -268.332 344.5537 -270.3633 342.0142 -270.9346 c340.5059 -271.2744 339.2842 -273.1992 338.7764 -274.4053 c338.1152 -275.9756 337.2949 -278.2568 336.0464 -279.8862 c335.8535 -280.1382 339.2461 -279.7642 340.3423 -279.2305 c341.4556 -278.6885 341.9932 -278.6377 342.2891 -277.1987 c342.6348 -275.52 344.3418 -275.9077 344.2783 -275.4634 c344.187 -274.8228 343.4321 -274.1514 343.8975 -273.7705 c344.5659 -273.2236 346.1411 -272.7124 349.4419 -271.3794 c352.7437 -270.0459 355.0254 -269.4595 355.9814 -269.2207 c357.251 -268.9033 357.1875 -268.5225 357.251 -266.8081 c357.3145 -265.0938 357.6318 -263.7607 358.2031 -263.2529 c358.7749 -262.7451 358.6475 -262.3643 358.5205 -261.7925 c358.3936 -261.2212 358.3936 -261.4751 358.2671 -260.396 c358.1396 -259.3169 358.7114 -258.1104 357.124 -256.9043 c355.5371 -255.6982 353.4312 -254.5308 353.1772 -254.7212 cf*u1 D0.11 w305.0479 -233.7881 m303.7559 -233.0718 301.4585 -231.6045 299.4063 -230.1182 c298.3896 -229.3813 L298.3892 -229.3809 276.1196 -229.4204 Y276.1191 -229.4204 276.1216 -259.8242 y276.1079 -268.7842 280.0127 -277.1821 287.4141 -284.1006 c293.1504 -289.4624 299.875 -292.8774 303.8901 -294.1729 c305.0596 -294.5498 L306.229 -294.1729 l310.2378 -292.8794 316.9512 -289.4648 322.6777 -284.0967 c330.0557 -277.1802 333.9482 -268.7837 333.9346 -259.8154 c333.9346 -259.8242 333.9189 -229.4199 Y312.3525 -229.3818 L311.3652 -230.0532 l309.0645 -231.6187 306.3887 -233.0996 305.0479 -233.7881 Cf0 D305.0596 -290.5479 m301.1299 -289.2798 294.9541 -285.9346 290.0156 -281.3179 c283.4063 -275.1396 279.9189 -267.7095 279.9307 -259.8301 c279.9307 -259.8242 279.9028 -233.23 Y279.915 -233.2295 297.1719 -233.2026 y299.3022 -234.7461 301.7256 -236.3018 303.2021 -237.1196 c304.9795 -238.1045 L306.7871 -237.1768 l308.4229 -236.3374 311.2236 -234.7573 313.5088 -233.2021 c330.1001 -233.229 L330.1255 -259.8213 L330.1377 -267.7075 326.6611 -275.1411 320.0723 -281.3179 c315.1436 -285.938 308.981 -289.2827 305.0596 -290.5479 Cf*U1 w305.0186 -259.4526 m303.7251 -259.4521 302.5371 -259.999 301.4868 -260.4858 c300.623 -260.8862 299.8076 -261.2642 299.127 -261.2642 c298.4199 -261.2642 297.5825 -260.8843 296.6958 -260.4819 c295.6543 -260.0098 294.4736 -259.4741 293.2002 -259.4497 c291.874 -259.4248 290.6577 -259.9888 289.585 -260.4858 c288.7212 -260.8862 287.9063 -261.2642 287.2246 -261.2642 c286.5176 -261.2642 285.6807 -260.8843 284.7939 -260.4819 c283.7524 -260.0098 282.5718 -259.4741 281.2979 -259.4497 c281.2651 -259.4492 281.2329 -259.4531 281.2002 -259.4531 C281.2002 -259.6909 281.2007 -259.8228 y281.1992 -260.5601 281.2319 -261.2822 281.291 -261.9922 C282.0313 -262.019 282.8638 -262.395 283.7446 -262.7949 c284.8379 -263.2905 285.9688 -263.8037 287.2246 -263.8037 c288.4658 -263.8037 289.5776 -263.2881 290.6528 -262.79 c291.5566 -262.3706 292.4111 -261.9746 293.1514 -261.9888 c293.9019 -262.0029 294.7495 -262.3877 295.6465 -262.7949 c296.7402 -263.2905 297.8706 -263.8037 299.127 -263.8037 c300.3677 -263.8037 301.4795 -263.2881 302.5547 -262.79 c303.3218 -262.4346 304.0527 -262.0957 304.7085 -262.0098 C305.0649 -261.936 305.4077 -262.0054 y306.0728 -262.084 306.7847 -262.4282 307.5654 -262.79 c308.6406 -263.2881 309.752 -263.8037 310.9932 -263.8037 c312.2495 -263.8037 313.3799 -263.2905 314.4736 -262.7949 c315.3706 -262.3877 316.2183 -262.0029 316.9683 -261.9888 c317.709 -261.9746 318.563 -262.3706 319.4673 -262.79 c320.5425 -263.2881 321.6538 -263.8037 322.895 -263.8037 c324.1509 -263.8037 325.2817 -263.2905 326.375 -262.7949 c327.2437 -262.4009 328.0645 -262.0313 328.7964 -261.9946 C328.8555 -261.2837 328.8882 -260.5605 328.8867 -259.8223 C328.8867 -259.6899 328.8867 -259.4521 V328.8647 -259.4521 328.8438 -259.4492 328.8223 -259.4497 c327.5479 -259.4741 326.3677 -260.0098 325.3262 -260.4819 c324.4395 -260.8843 323.6021 -261.2642 322.895 -261.2642 c322.2139 -261.2642 321.3989 -260.8862 320.5352 -260.4858 c319.4624 -259.9888 318.2456 -259.4248 316.9199 -259.4497 c315.646 -259.4741 314.4658 -260.0098 313.4243 -260.4819 c312.5376 -260.8843 311.7002 -261.2642 310.9932 -261.2642 c310.312 -261.2642 309.4966 -260.8862 308.6333 -260.4858 c307.583 -259.999 306.3945 -259.4521 305.1016 -259.4526 CF0.011 w291.9648 -241.6895 m281.1729 -237.2095 L281.1841 -235.335 L296.4097 -241.6836 L291.9648 -241.6895 Lf300.728 -237.2397 m300.728 -240.5044 L286.1245 -234.4102 L295.2456 -234.4102 296.2192 -234.4102 V300.728 -237.2397 Lf281.2026 -241.6836 m281.2026 -238.3203 l289.3374 -241.6841 L281.2026 -241.6836 Lf318.1538 -250.4053 m328.9458 -254.8853 L328.9346 -256.7598 L313.709 -250.4111 L318.1538 -250.4053 Lf309.3901 -257.8374 m309.3901 -251.5898 L323.9937 -257.8394 L314.873 -257.8394 313.8994 -257.8394 V309.3901 -257.8374 Lf328.9155 -250.4111 m328.9155 -253.7744 l320.7808 -250.4102 L328.9155 -250.4111 Lf309.3882 -237.2397 m309.3794 -240.5044 L322.6611 -234.3999 L317.7432 -234.3999 313.8682 -234.3999 V309.3882 -237.2397 Lf328.9155 -241.7148 m328.9155 -237.1406 l318.8838 -241.7153 L328.9155 -241.7148 Lf328.1362 -234.4106 m312.1592 -241.6855 L309.3589 -241.6855 L325.2793 -234.4106 L328.1362 -234.4106 Lf300.73 -257.8047 m300.7388 -251.5249 L287.457 -257.8159 L292.3755 -257.8159 296.25 -257.8159 V300.73 -257.8047 Lf281.2026 -250.3457 m281.2026 -254.9199 l291.2344 -250.3452 L281.2026 -250.3457 Lf281.9824 -257.8359 m297.959 -250.3442 L300.7593 -250.3442 L284.8389 -257.8359 L281.9824 -257.8359 Lfu1 w304.0361 -265.0405 m303.1108 -265.2188 302.248 -265.6143 301.4634 -265.979 c300.6006 -266.3809 299.7856 -266.7598 299.1045 -266.7607 c298.3975 -266.7617 297.5596 -266.3833 296.6729 -265.9819 c295.6304 -265.5107 294.4492 -264.9771 293.1753 -264.9546 c291.8496 -264.9316 290.6338 -265.4971 289.5615 -265.9961 c288.6987 -266.3975 287.8838 -266.7769 287.2026 -266.7773 c286.4956 -266.7788 285.6577 -266.3999 284.7705 -265.999 c283.8467 -265.5811 282.813 -265.1162 281.7026 -265 C281.6982 -264.9897 L283.1758 -272.0645 287.5493 -277.606 292.2925 -281.6323 C287.6836 -270.6421 L296.3403 -278.2349 L294.9902 -266.3013 L301.6704 -276.2593 L304.0361 -265.0405 LfUu306.0513 -265.0405 m306.9766 -265.2188 307.8394 -265.6143 308.624 -265.979 c309.4868 -266.3809 310.3018 -266.7598 310.9829 -266.7607 c311.6899 -266.7617 312.5278 -266.3833 313.415 -265.9819 c314.457 -265.5107 315.6382 -264.9771 316.9121 -264.9546 c318.2378 -264.9316 319.4536 -265.4971 320.5259 -265.9961 c321.3887 -266.3975 322.2036 -266.7769 322.8848 -266.7773 c323.5918 -266.7788 324.4297 -266.3999 325.3164 -265.999 c326.2407 -265.5811 327.2744 -265.1162 328.3848 -265 C328.3896 -264.9897 L326.9116 -272.0645 322.5381 -277.606 317.7949 -281.6323 C322.4038 -270.6421 L313.7471 -278.2349 L315.0972 -266.3013 L308.417 -276.2593 L306.0513 -265.0405 LfU12 w278.3159 -200.3594 m278.6968 -196.8672 276.0938 -193.168 v274.3896 -190.7461 272.4116 -188.6777 273.1099 -185.376 c268.3481 -190.8999 270.9512 -198.8989 v271.6455 -201.0327 271.7129 -201.1211 272.5386 -202.2637 c272.1577 -202.0557 270.5068 -201.6748 v268.8564 -201.2944 267.7451 -201.8926 265.8721 -201.3579 c264.9834 -201.1035 264.793 -200.7402 y265.3643 -204.5493 269.6182 -208.9297 273.5542 -208.9932 c272.6655 -214.1357 278.6333 -219.5146 v279.5625 -220.3525 279.7759 -220.4844 281.4268 -221.5005 c277.4902 -214.3262 281.998 -208.3584 v288.1367 -200.2314 283.2676 -196.1689 y282.8232 -198.9624 281.1729 -199.5337 280.5376 -199.8511 c279.9028 -200.1689 278.9507 -201.1211 278.1255 -201.8193 c278.2842 -201.4648 278.3159 -200.3594 Vf1 w292.6001 -210.8291 m292.6636 -212.8516 294.0786 -214.9756 Y290.1196 -213.7749 289.9761 -210.7959 V289.7866 -208.1577 292.1167 -207.1211 Y293.916 -207.1069 L292.6636 -208.9155 292.6001 -210.8291 Vf299.2666 -211.5273 m299.3301 -213.686 299.478 -214.3633 300.2822 -215.7813 C298.2505 -216.1196 296.3887 -215.8447 295.563 -214.9561 C294.8247 -214.1504 294.124 -213.251 293.7856 -211.3887 C293.3936 -209.0181 295.1021 -207.1069 Y300.6421 -207.1328 L299.457 -208.7339 299.2666 -211.5273 Vf0.1 w331.7715 -200.3594 m331.3906 -196.8672 333.9937 -193.168 v335.6978 -190.7461 337.6758 -188.6777 336.9775 -185.376 c341.7393 -190.8999 339.1362 -198.8989 v338.4419 -201.0327 338.3745 -201.1211 337.5488 -202.2637 c337.9297 -202.0557 339.5806 -201.6748 v341.2314 -201.2944 342.3423 -201.8926 344.2148 -201.3579 c345.104 -201.1035 345.2944 -200.7402 y344.7231 -204.5493 340.4692 -208.9297 336.5332 -208.9932 c337.4219 -214.1357 331.4541 -219.5146 v330.5244 -220.3525 330.248 -220.5747 328.1284 -221.5029 c331.1777 -217.2407 330.2197 -213.043 v329.1689 -208.438 326.124 -205.4971 325.4229 -203.5283 c323.7725 -198.8936 326.8198 -196.1689 y327.2642 -198.9624 328.915 -199.5337 329.5498 -199.8511 c330.1846 -200.1689 331.1367 -201.1211 331.9619 -201.8193 c332.0889 -201.6289 331.7715 -200.3594 Vf305.0332 -189.1729 m306.1758 -189.1729 307.002 -189.9028 307.8047 -190.5391 c307.8047 -187.2417 l305.3296 -187.792 l306.6626 -185.2046 l305.0332 -185.2046 L305.0439 -185.2046 L303.4141 -185.2046 l304.7476 -187.792 l302.272 -187.2417 l302.272 -190.5391 l303.0747 -189.9028 303.9009 -189.1729 305.0439 -189.1729 C305.0332 -189.1729 Lf299.8379 -159.5732 m300.4092 -159.5732 300.9414 -159.6675 301.3433 -159.9856 c301.3433 -158.5073 l300.3994 -158.6274 l300.6636 -157.4888 l299.8486 -157.4888 L299.854 -157.4888 L299.0396 -157.4888 l299.3032 -158.6274 l298.3599 -158.5073 l298.3599 -159.9856 l298.7612 -159.6675 299.272 -159.5732 299.8433 -159.5732 C299.8379 -159.5732 Lf10 w303.7393 -216.3013 m306.1333 -216.3325 306.98 -214.0469 306.98 -211.7612 C307.0645 -209.1372 305.2871 -207.1079 Y302.2505 -207.1079 L300.4727 -209.1372 300.5576 -211.7612 V300.5576 -214.0469 301.4038 -216.3325 303.7983 -216.3013 C303.7393 -216.3013 Lf306.7417 -207.1069 m307.3579 -208.0625 308.3154 -209.8159 308.249 -211.8647 C308.25 -211.8237 L308.25 -212.7319 308.1333 -213.5698 307.9106 -214.3081 C306.8179 -218.4849 306.5674 -219.1035 v305.7524 -221.1157 306.3979 -223.6748 Y311.8154 -224.0977 314.9478 -218.8496 V317.064 -221.6431 L323.1689 -227.5581 331.7715 -217.7495 328.2163 -211.2734 c325.6133 -217.6221 321.4551 -216.5112 v319.209 -215.9111 318.7305 -213.2314 318.5874 -211.2314 c318.397 -208.5649 317.6011 -207.1069 Y306.7417 -207.1069 Lf1 D0.1 w312.1226 -227.9072 m314.854 -225.9702 317.0552 -223.519 y316.0586 -223.209 314.9556 -221.3833 Y314.9712 -221.4106 L311.3804 -225.5352 306.5098 -225.2119 306.2793 -225.1938 c305.1885 -225.1084 L304.9209 -224.0474 l304.8423 -223.7358 304.1816 -220.936 305.1548 -218.5327 c305.2207 -218.3643 305.3965 -217.7588 305.52 -217.2729 C304.8853 -217.5112 l303.7236 -217.7471 302.3833 -217.7852 301.4277 -217.1313 C299.0635 -217.5059 297.0444 -217.3364 V295.9155 -217.2437 293.0767 -216.4478 292.1382 -215.8799 C292.1328 -215.8862 L288.1997 -219.4082 282.5493 -216.7119 281.835 -211.8804 C280.3672 -216.2534 282.4741 -220.2251 282.7627 -220.7671 c284.127 -223.3335 288.4927 -223.7988 290.188 -223.2568 c291.9282 -222.7002 292.4736 -222.2407 y294.29 -224.4707 296.9175 -226.4785 v300.2881 -229.0547 304.6875 -231.5254 305.0439 -231.5415 c305.3926 -231.5576 309.2158 -229.9683 312.1226 -227.9072 cfu0 D1 g1 w305.0645 -322.9326 mFU*u0 g302.3262 -323.6011 m301.7114 -322.4204 299.6865 -324.75 297.9365 -324.2041 c296.0098 -323.6025 296.895 -320.6436 295.981 -320.1069 C295.8042 -319.9517 L296.0386 -319.9307 L297.0928 -320.0371 298.124 -317.1255 300.0347 -317.7769 c301.7695 -318.3682 302.0596 -321.5015 303.2227 -320.8545 C303.248 -320.8491 303.3901 -320.7534 303.4414 -320.7163 c303.4961 -320.6768 303.5591 -320.6089 303.6157 -320.5513 c304.5483 -319.6021 301.707 -318.3955 301.6855 -316.5625 c301.6621 -314.5439 304.75 -314.4717 304.9775 -313.4365 C305.0703 -313.2207 L305.1626 -313.4365 L305.3877 -314.4727 308.4751 -314.5532 308.4463 -316.5713 c308.4199 -318.4043 305.5298 -319.6489 306.5044 -320.5547 C306.5972 -320.6431 306.5869 -320.6572 306.7021 -320.7412 c306.8076 -320.8179 306.833 -320.8115 306.9053 -320.8477 c308.0962 -321.4414 308.3657 -318.3657 310.1025 -317.7788 c312.0146 -317.1328 313.0376 -320.0474 314.0928 -319.9438 C314.3267 -319.9658 L314.1494 -320.1201 L313.2339 -320.6543 314.1113 -323.6157 312.1831 -324.2119 c310.4316 -324.7534 308.355 -322.3892 307.7944 -323.5962 C307.7773 -323.6147 307.7183 -323.7759 307.6987 -323.8364 c307.6777 -323.9004 307.6665 -323.9922 307.6548 -324.0723 c307.458 -325.3887 310.4663 -324.6943 311.561 -326.1646 c312.7661 -327.7837 310.3105 -329.6577 310.7354 -330.6289 C310.7866 -330.8579 L310.585 -330.7373 L309.7944 -330.0317 307.249 -331.7813 306.0859 -330.1313 c305.0298 -328.6328 306.6367 -325.9277 305.3154 -325.7676 C305.1885 -325.751 305.1885 -325.7329 305.0459 -325.7329 c304.916 -325.7324 304.9038 -325.7554 304.8237 -325.7686 c303.5112 -325.9883 305.1011 -328.6348 304.041 -330.1299 c302.873 -331.7769 300.3325 -330.0205 299.54 -330.7241 C299.3379 -330.8438 L299.3906 -330.6147 L299.8174 -329.645 297.3672 -327.7646 298.5767 -326.1489 c299.6753 -324.6812 302.7441 -325.374 302.4883 -324.0679 C302.4912 -324.0425 302.4438 -323.8633 302.4243 -323.8032 c302.3843 -323.6792 302.3633 -323.6729 302.3262 -323.6011 cf1 D306.1851 -323.603 m306.5283 -322.9883 306.3081 -322.2124 305.6934 -321.8691 c305.0791 -321.5259 304.3027 -321.7461 303.9595 -322.3608 c303.6167 -322.9756 303.8364 -323.752 304.4512 -324.0947 c305.0659 -324.438 305.8423 -324.2178 306.1851 -323.603 cf*U*u0 D325.0576 -320.5566 m324.0762 -319.6577 322.9702 -322.5396 321.1387 -322.625 c319.1226 -322.7188 318.9424 -319.6353 317.8999 -319.4438 C317.6807 -319.3584 L317.8936 -319.2588 L318.9209 -318.998 318.894 -315.9092 320.9121 -315.8677 c322.7446 -315.8301 324.0894 -318.6753 324.9604 -317.6694 C324.9824 -317.6563 325.0835 -317.5176 325.1191 -317.4648 c325.1567 -317.4087 325.1929 -317.3237 325.2266 -317.25 c325.7778 -316.0391 322.6953 -315.877 322.0479 -314.1621 c321.3359 -312.2734 324.2129 -311.1489 324.0728 -310.0986 C324.0864 -309.8643 L324.2466 -310.0352 L324.812 -310.9321 327.7417 -309.9517 328.4043 -311.8584 c329.0068 -313.5898 326.7163 -315.7476 327.9419 -316.2651 C328.0596 -316.3164 328.0547 -316.3335 328.1919 -316.373 c328.3164 -316.4092 328.3384 -316.3945 328.4189 -316.4033 c329.7412 -316.5537 328.9424 -313.5718 330.3735 -312.4268 c331.9497 -311.1655 333.9077 -313.5542 334.8638 -313.0962 C335.0908 -313.0366 L334.9775 -313.2422 L334.2998 -314.0571 336.1372 -316.54 334.5288 -317.7598 c333.0684 -318.8677 330.3081 -317.3564 330.1948 -318.6816 C330.1846 -318.7056 330.1841 -318.877 330.1865 -318.9409 c330.189 -319.0083 330.21 -319.0981 330.2261 -319.1772 c330.4912 -320.4814 333.0806 -318.8003 334.6123 -319.8076 c336.2988 -320.917 334.6318 -323.5176 335.3628 -324.2852 C335.4897 -324.4829 L335.2593 -324.4385 L334.2749 -324.0454 332.481 -326.5605 330.8242 -325.4077 c329.3193 -324.3608 329.9038 -321.269 328.6074 -321.5703 C328.4824 -321.5981 328.4766 -321.5815 328.3423 -321.6299 c328.2202 -321.6743 328.2163 -321.6997 328.146 -321.7393 c326.9878 -322.395 329.3867 -324.3379 328.9019 -326.106 c328.3682 -328.0527 325.3794 -327.271 324.8755 -328.2031 C324.7266 -328.3853 L324.6978 -328.1519 L324.7671 -327.0942 321.8213 -326.1655 322.4058 -324.2334 c322.936 -322.4785 326.0566 -322.0796 325.3696 -320.9404 C325.3638 -320.915 325.2578 -320.7632 325.2188 -320.7134 c325.1392 -320.6108 325.1172 -320.6113 325.0576 -320.5566 cf1 D328.6846 -319.2393 m328.7969 -318.5439 328.3242 -317.8901 327.6294 -317.7778 c326.9346 -317.6655 326.2803 -318.1382 326.168 -318.833 c326.0562 -319.5278 326.5283 -320.1821 327.2236 -320.2939 c327.9185 -320.4063 328.5723 -319.9341 328.6846 -319.2393 cf*U*u0 D345.377 -309.9219 m344.1475 -309.4131 344.0933 -312.499 342.4019 -313.2056 c340.5391 -313.9834 339.3154 -311.147 338.27 -311.3242 C338.0352 -311.3188 L338.2012 -311.1523 L339.0771 -310.5557 337.9956 -307.6626 339.8779 -306.9336 c341.5874 -306.2715 343.8232 -308.4854 344.2983 -307.2417 C344.3145 -307.2217 344.3618 -307.0566 344.377 -306.9951 c344.3936 -306.9302 344.3984 -306.8374 344.4048 -306.7568 c344.5088 -305.4302 341.5566 -306.3325 340.3623 -304.9419 c339.0469 -303.4106 341.3657 -301.3706 340.8745 -300.4312 C340.8071 -300.2061 L341.0166 -300.3125 L341.8545 -300.9614 344.272 -299.0386 345.5474 -300.6035 c346.7051 -302.0244 345.291 -304.8354 346.6196 -304.9028 C346.7476 -304.9106 346.749 -304.9287 346.8911 -304.9185 c347.021 -304.9097 347.0366 -304.8882 347.1152 -304.8691 c348.4092 -304.5586 346.6387 -302.0298 347.5918 -300.4639 c348.6416 -298.7397 351.2988 -300.3149 352.0405 -299.5571 C352.2334 -299.4233 L352.1973 -299.6558 L351.8389 -300.6533 354.4146 -302.3579 353.3203 -304.0542 c352.3271 -305.5947 349.2163 -305.1182 349.563 -306.4033 C349.562 -306.4292 349.6201 -306.5903 349.644 -306.6489 c349.6689 -306.7114 349.7197 -306.7891 349.7622 -306.8584 c350.4575 -307.9927 352.3159 -305.5273 354.0996 -305.9502 c356.0635 -306.416 355.3867 -309.4297 356.3364 -309.9009 C356.5229 -310.0435 L356.291 -310.0806 L355.2314 -310.0479 354.4063 -313.0244 352.4546 -312.5083 c350.6826 -312.0391 350.1748 -308.9336 349.0596 -309.6602 C348.9517 -309.729 348.9404 -309.7153 348.8311 -309.8071 c348.731 -309.8906 348.7363 -309.9155 348.6836 -309.9771 c347.8193 -310.9893 350.7383 -311.9946 350.8872 -313.8218 c351.0513 -315.8335 347.9761 -316.1211 347.8213 -317.1694 C347.7437 -317.3911 L347.6362 -317.1821 L347.3398 -316.1646 344.2544 -316.2993 344.1421 -314.2837 c344.041 -312.4536 346.8369 -311.0112 345.8013 -310.1758 C345.7871 -310.1543 345.6357 -310.0479 345.582 -310.0137 c345.4722 -309.9448 345.4517 -309.9531 345.377 -309.9219 cf1 D348.3345 -307.4434 m348.2021 -306.752 347.5347 -306.2988 346.8433 -306.4307 c346.1523 -306.563 345.6987 -307.231 345.8311 -307.9219 c345.9634 -308.6133 346.6309 -309.0669 347.3223 -308.9346 c348.0137 -308.8022 348.4668 -308.1348 348.3345 -307.4434 cf*U*u0 D279.9243 -318.687 m279.7505 -317.3677 277.0508 -318.8643 275.5933 -317.7524 c273.9883 -316.5283 275.8325 -314.0503 275.1567 -313.2339 C275.0439 -313.0273 L275.271 -313.0879 L276.2256 -313.5488 278.1904 -311.165 279.7627 -312.4307 c281.1909 -313.5796 280.3921 -316.623 281.7061 -316.4126 C281.7314 -316.4165 281.8979 -316.3755 281.959 -316.3579 c282.0239 -316.3394 282.1064 -316.2974 282.1792 -316.2627 c283.3804 -315.6895 281.123 -313.5835 281.7295 -311.854 c282.3979 -309.9492 285.3247 -310.9375 285.8926 -310.0425 C286.0532 -309.8711 L286.0664 -310.106 L285.9233 -311.1563 288.7974 -312.2881 288.0796 -314.1748 c287.4282 -315.8882 284.2866 -316.0688 284.8926 -317.2539 C284.9497 -317.3682 284.9351 -317.3784 285.0146 -317.4966 c285.0874 -317.6045 285.1133 -317.6074 285.1689 -317.666 c286.0854 -318.6309 287.3901 -315.8335 289.2227 -315.876 c291.2407 -315.9229 291.2056 -319.0117 292.2324 -319.2749 C292.4448 -319.3755 L292.2256 -319.46 L291.1826 -319.6484 290.9941 -322.7314 288.978 -322.6323 c287.147 -322.542 286.0044 -319.6104 285.0649 -320.5527 C285.042 -320.5645 284.9316 -320.6958 284.8926 -320.7461 c284.8511 -320.7988 284.8091 -320.8813 284.7705 -320.9526 c284.1357 -322.1221 287.1997 -322.4985 287.7256 -324.2549 c288.3047 -326.1885 285.356 -327.1094 285.4229 -328.167 C285.3931 -328.4004 L285.2446 -328.2178 L284.7432 -327.2842 281.7524 -328.0576 281.2241 -326.1099 c280.7441 -324.3403 283.1797 -322.3477 281.9927 -321.7456 C281.8789 -321.6865 281.8853 -321.6699 281.751 -321.6206 c281.6289 -321.5762 281.6099 -321.5928 281.5303 -321.5781 c280.2217 -321.3359 280.8105 -324.3662 279.3027 -325.4092 c277.6426 -326.5571 275.8555 -324.0376 274.8701 -324.4277 C274.6396 -324.4712 L274.7671 -324.2739 L275.5 -323.5083 273.8403 -320.9038 275.5298 -319.7988 c277.064 -318.7959 279.7114 -320.4961 279.917 -319.1816 C279.9287 -319.1582 279.9453 -318.9741 279.9473 -318.9106 c279.9521 -318.7808 279.9351 -318.7671 279.9243 -318.687 cf1 D283.5503 -320.0093 m284.0825 -319.5488 284.1411 -318.7441 283.6812 -318.2114 c283.2207 -317.6787 282.416 -317.6206 281.8833 -318.0806 c281.3511 -318.5405 281.2925 -319.3457 281.7524 -319.8779 c282.2124 -320.4106 283.0176 -320.4692 283.5503 -320.0093 cf*U*u0 D260.5542 -306.4082 m260.8418 -305.1089 257.7935 -305.5918 256.8037 -304.0483 c255.7144 -302.3491 258.2949 -300.6514 257.9395 -299.6528 C257.9038 -299.4209 L258.0962 -299.5547 L258.8359 -300.3145 261.4971 -298.7466 262.5425 -300.4731 c263.4912 -302.042 261.6997 -304.6284 263.0063 -304.8804 C263.0288 -304.8926 263.1997 -304.9106 263.2627 -304.9155 c263.3301 -304.9199 263.4219 -304.9087 263.5024 -304.9009 c264.8271 -304.7729 263.4258 -302.0225 264.5874 -300.6045 c265.8672 -299.043 268.2793 -300.9727 269.1187 -300.3257 C269.3286 -300.2202 L269.2607 -300.4448 L268.7671 -301.3828 271.0806 -303.4297 269.7607 -304.957 c268.5625 -306.3447 265.5488 -305.4395 265.7134 -306.7603 C265.7275 -306.8877 265.71 -306.8916 265.7446 -307.0303 c265.7764 -307.1563 265.7998 -307.168 265.832 -307.2422 c266.3628 -308.4624 268.5459 -306.2798 270.2534 -306.9468 c272.1338 -307.6807 271.0439 -310.5713 271.9185 -311.1699 C272.084 -311.3369 L271.8491 -311.3413 L270.8047 -311.1621 269.5728 -313.9946 267.7124 -313.2119 c266.0225 -312.5005 265.9517 -309.355 264.7466 -309.9194 C264.7207 -309.9229 264.5723 -310.0083 264.5186 -310.0415 c264.4614 -310.0776 264.3936 -310.1406 264.3335 -310.1943 c263.3369 -311.0762 266.0874 -312.478 265.9805 -314.3081 c265.8633 -316.3232 262.7778 -316.1802 262.4785 -317.1968 C262.3711 -317.4058 L262.2939 -317.1841 L262.1421 -316.1348 259.0674 -315.8389 259.2368 -313.8276 c259.3911 -312.001 262.3608 -310.9614 261.4517 -309.9897 C261.3652 -309.895 261.377 -309.8813 261.2676 -309.7896 c261.168 -309.7056 261.144 -309.7148 261.0742 -309.6743 c259.9277 -308.999 259.4448 -312.0479 257.6709 -312.5117 c255.7183 -313.0229 254.9009 -310.0439 253.8418 -310.0742 C253.6094 -310.0361 L253.7969 -309.8945 L254.7476 -309.4253 254.0791 -306.4102 256.0444 -305.9497 c257.8291 -305.5317 259.7349 -308.0352 260.3784 -306.8701 C260.397 -306.8525 260.4756 -306.6846 260.4995 -306.626 c260.5483 -306.5059 260.5366 -306.4868 260.5542 -306.4082 cf1 D263.5093 -308.8901 m264.167 -308.6401 264.4971 -307.9038 264.2471 -307.2456 c263.9966 -306.5879 263.2603 -306.2578 262.6025 -306.5083 c261.9448 -306.7583 261.6143 -307.4946 261.8647 -308.1523 c262.1152 -308.8101 262.8511 -309.1406 263.5093 -308.8901 cf*U1 Ap0 D0.1 w305.0439 -322.8604 m340.9434 -322.8604 370.0474 -293.7568 370.0474 -257.8569 c370.0474 -221.957 340.9434 -192.8535 305.0439 -192.8535 c269.1436 -192.8535 240.04 -221.957 240.04 -257.8569 c240.04 -293.7568 269.1436 -322.8604 305.0439 -322.8604 cn*u0 Ap0 O0 g1 w328.915 -246.0327 m328.915 -249.1338 L308.21 -249.1338 L308.21 -257.8179 L301.9624 -257.8179 L301.9624 -249.1338 L281.1729 -249.1338 L281.1729 -246.0327 l281.1729 -242.9111 L301.9624 -242.9111 L301.936 -236.1597 L304.5029 -236.4863 305.0596 -236.4146 V305.0278 -236.4146 L305.5845 -236.4863 308.2051 -236.1597 Y308.21 -242.9111 L328.915 -242.9111 L328.915 -246.0327 lf1 D309.0913 -244.8926 m307.5703 -245.1968 l307.3491 -243.5742 l305.9922 -244.8926 l305.0732 -242.5947 l304.1294 -244.8926 l302.7725 -243.5933 l302.5513 -245.1968 l301.0112 -244.8735 L302.3169 -247.7378 L303.3472 -247.1792 303.8301 -246.9106 305.084 -246.9106 C305.0376 -246.9106 L306.2915 -246.9106 306.7334 -247.1792 307.7632 -247.7378 C309.0913 -244.8926 lf*U*u0 D0.1 w299.8379 -160.4397 m301.5518 -160.4397 301.4248 -161.7727 y303.3296 -159.572 305.8691 -161.0532 305.8691 -162.5981 c305.8691 -163.741 305.4883 -164.8838 304.7261 -165.3281 c304.562 -165.4243 304.5356 -165.8994 304.917 -166.0266 c305.2979 -166.1536 305.5518 -166.0901 305.5518 -166.344 c305.5518 -166.5979 305.4883 -166.9788 305.0439 -166.9788 c304.5991 -166.9788 304.4087 -166.9153 304.4722 -167.1692 c304.5356 -167.4231 304.4722 -168.6294 304.6631 -170.4072 c304.853 -172.1846 306.7578 -173.2751 306.7578 -173.9624 c306.7578 -174.2373 306.0542 -174.4805 305.8057 -174.5337 C306.377 -175.105 308.0913 -175.937 309.1069 -175.9355 c313.3394 -175.9302 313.9951 -173.793 311.5615 -173.7349 c309.1836 -173.678 306.4404 -172.7561 306.3979 -171.1055 c306.3154 -167.8845 309.0952 -167.3394 311.9482 -167.074 c313.9951 -166.8835 315.3496 -166.4919 315.8789 -165.7727 c316.5068 -164.9187 316.854 -163.9028 316.9155 -164.1167 c317.2813 -165.3831 317.6172 -167.8755 316.979 -168.9893 c316.1489 -170.4375 313.5088 -170.0896 312.2388 -169.751 c310.9692 -169.4126 309.5884 -169.6453 309.5723 -170.7878 c309.563 -171.4705 310.9668 -171.4961 312.1543 -171.5339 c313.3184 -171.5708 313.2334 -171.5498 313.8208 -171.6133 c316.8135 -171.937 317.1484 -173.374 317.1484 -174.7456 c317.1484 -176.4331 315.1382 -177.4063 y314.9268 -179.0415 317.6563 -180.6709 v318.2021 -180.9966 318.1958 -181.438 317.9951 -181.7715 c317.5918 -182.4395 315.4502 -189.1304 315.1172 -189.1304 c314.228 -189.1304 309.8687 -189.1304 y309.8687 -188.7495 309.6147 -188.4585 310.2075 -187.6968 c310.7998 -186.9346 311.6465 -187.3579 311.9849 -187.104 c312.3232 -186.8501 312.3408 -185.9585 312.4927 -185.4111 c312.5986 -185.0303 312.9585 -183.8452 312.6621 -183.7183 c312.1177 -183.4849 309.1904 -181.5928 308.7681 -181.2632 c308.1177 -180.7554 307.9932 -181.001 307.7524 -181.2632 c305.8584 -183.3267 301.9487 -183.8291 301.7422 -184.2261 c301.4063 -184.8721 300.8232 -186.8525 300.5576 -188.1201 c300.4673 -188.5483 300.2612 -189.1357 y293.7007 -189.1357 l293.6953 -188.3052 294.1743 -187.8008 294.4097 -187.6064 c294.6797 -187.3843 295.563 -187.2734 y296.0708 -181.2632 l294.3779 -180.0781 294.124 -178.7236 v293.6997 -176.4604 294.0654 -175.7637 294.124 -174.9995 c294.145 -174.7241 293.9634 -174.5669 293.8066 -174.5337 c293.5581 -174.4805 292.9175 -174.2373 292.9175 -173.9624 c292.9175 -173.2751 294.8223 -172.1846 295.0127 -170.4072 c295.2031 -168.6294 295.1396 -167.4231 295.2031 -167.1692 c295.2666 -166.9153 295.0762 -166.9788 294.6318 -166.9788 c294.1875 -166.9788 294.124 -166.5979 294.124 -166.344 c294.124 -166.0901 294.3779 -166.1536 294.7588 -166.0266 c295.1396 -165.8994 295.1138 -165.4243 294.9492 -165.3281 c294.1875 -164.8838 293.7427 -163.7393 293.8066 -162.5981 c293.9126 -160.7146 296.6846 -159.7837 298.2505 -161.7727 c298.1235 -160.4397 299.8379 -160.4397 vF1 Ap1 D296.6636 -164.3757 m297.2983 -163.5503 298.4326 -163.1697 v297.6689 -162.2717 296.7271 -162.2717 v295.7847 -162.2717 295.021 -163.1697 y296.0923 -163.5503 296.6636 -164.3757 yf304.6548 -163.1697 m303.8906 -162.2717 302.9487 -162.2717 v302.0063 -162.2717 301.2427 -163.1697 y302.377 -163.5503 303.0122 -164.3757 y303.5835 -163.5503 304.6548 -163.1697 vf299.8379 -178.9541 m300.1846 -178.9541 300.4663 -178.311 300.4663 -177.5176 c300.4663 -176.7241 300.1846 -176.0811 299.8379 -176.0811 c299.4907 -176.0811 299.2095 -176.7241 299.2095 -177.5176 c299.2095 -178.311 299.4907 -178.9541 299.8379 -178.9541 cf296.7773 -175.6694 m296.9517 -175.5747 296.7861 -174.9326 296.4077 -174.2354 c296.0293 -173.5381 295.5811 -173.0496 295.4067 -173.144 c295.2324 -173.2388 295.3979 -173.8809 295.7764 -174.5781 c296.1548 -175.2754 296.603 -175.7637 296.7773 -175.6694 cf298.0601 -176.7275 m298.457 -176.7275 298.7783 -176.2852 298.7783 -175.7402 c298.7783 -175.1943 298.457 -174.7524 298.0601 -174.7524 c297.6636 -174.7524 297.3418 -175.1943 297.3418 -175.7402 c297.3418 -176.2852 297.6636 -176.7275 298.0601 -176.7275 cf303.8994 -174.5781 m304.2778 -173.8809 304.4434 -173.2388 304.269 -173.144 c304.0947 -173.0496 303.6465 -173.5381 303.2681 -174.2354 c302.8896 -174.9326 302.7241 -175.5747 302.8979 -175.6694 c303.0728 -175.7637 303.5205 -175.2754 303.8994 -174.5781 cf302.3335 -175.7402 m302.3335 -175.1943 302.0122 -174.7524 301.6152 -174.7524 c301.2188 -174.7524 300.897 -175.1943 300.897 -175.7402 c300.897 -176.2852 301.2188 -176.7275 301.6152 -176.7275 c302.0122 -176.7275 302.3335 -176.2852 302.3335 -175.7402 cf0 Ap297.854 -168.2961 m298.165 -168.2961 299.0283 -167.9114 298.8696 -167.7246 c298.3301 -167.0898 297.2349 -166.8201 y297.0605 -167.3281 297.4727 -168.2961 297.854 -168.2961 cf302.4409 -166.8201 m301.3457 -167.0898 300.8057 -167.7246 v300.6475 -167.9114 301.5107 -168.2961 301.8218 -168.2961 c302.2026 -168.2961 302.6152 -167.3281 302.4409 -166.8201 cf299.8379 -170.1213 m300.0439 -170.1213 300.3774 -169.4546 300.4092 -169.1533 c300.4316 -168.9385 300.0122 -168.9785 299.8379 -168.9785 c299.6631 -168.9785 299.2437 -168.9385 299.2666 -169.1533 c299.2979 -169.4546 299.6387 -170.1213 299.8379 -170.1213 cf*Uuu*u1 w285.5615 -290.4526 m285.3345 -289.6362 283.9487 -284.2012 283.4648 -283.5288 c280.543 -279.4634 274.3794 -281.4346 268.2407 -283.2891 c265.0762 -284.2451 247.2822 -292.7573 242.2388 -291.4058 c240.1851 -290.855 239.3804 -290.1353 238.8721 -289.6904 c238.3638 -289.2456 237.856 -288.8647 238.1733 -289.8809 c238.4907 -290.8975 241.1274 -296.5483 242.1118 -298.0752 c243.9536 -300.9341 248.7178 -300.9341 253.9907 -298.7109 c255.5664 -298.0464 271.3325 -292.4854 273.873 -291.7866 c276.4141 -291.0879 280.9565 -290.6309 282.5122 -290.834 c283.9731 -291.0244 284.1426 -291.1094 284.9263 -291.5962 c285.3901 -291.8848 285.8789 -291.5962 285.5615 -290.4526 cf0 D250.293 -297.2681 m250.0503 -297.6997 249.5898 -298.0459 249.0615 -298.1938 c248.7036 -298.2939 248.1201 -298.3359 247.7339 -298.29 C247.6011 -298.2744 L247.5654 -298.1455 L247.3613 -297.4165 L247.1929 -296.8164 L247.6787 -297.207 L247.9507 -297.4258 248.2886 -297.6982 248.918 -297.5225 c249.145 -297.459 249.3198 -297.335 249.4111 -297.1729 c249.4941 -297.0249 249.5088 -296.8496 249.4536 -296.6528 c249.3359 -296.2339 248.959 -296.1196 248.3516 -295.981 c247.7471 -295.8428 247.062 -295.686 246.8477 -294.9204 c246.7437 -294.5488 246.7808 -294.1885 246.9546 -293.8794 c247.1611 -293.5127 247.5449 -293.2354 248.0356 -293.0977 c248.2207 -293.0459 248.4072 -293.0054 248.5874 -292.9663 c248.7671 -292.9268 248.937 -292.8896 249.106 -292.8428 C249.2983 -292.7886 L249.3521 -292.981 L249.5313 -293.6206 L249.6655 -294.0996 L249.2373 -293.8467 L248.8809 -293.6357 248.7271 -293.6157 248.3232 -293.729 c248.1016 -293.791 247.9424 -293.8975 247.8638 -294.0376 c247.7969 -294.1567 247.7871 -294.3037 247.8345 -294.4736 c247.9375 -294.8408 248.293 -294.9365 248.8643 -295.0625 c249.4609 -295.1938 250.2026 -295.3574 250.4287 -296.165 c250.5342 -296.5415 250.4873 -296.9229 250.293 -297.2681 cf252.9683 -294.6445 m252.6499 -294.7705 252.4849 -294.7759 252.3115 -294.7505 C252.5186 -295.2749 252.6812 -295.6865 Y252.7354 -295.8232 252.8989 -296.2383 253.1265 -296.3984 C253.4287 -296.6118 L253.0845 -296.7476 L252.1685 -297.1094 L251.8242 -297.2451 L251.8994 -296.8828 L251.9458 -296.6606 251.8184 -296.3384 251.7251 -296.103 C251.7119 -296.0693 L250.7266 -293.5728 250.7261 -293.5723 v250.6172 -293.2964 250.4937 -292.9834 250.3066 -292.8496 C250.0083 -292.6362 L250.3496 -292.5015 L250.6108 -292.3984 250.8672 -292.2773 251.1152 -292.1611 c251.3633 -292.0439 251.6206 -291.9229 251.8833 -291.8193 c252.7734 -291.4678 253.4966 -291.7446 253.8179 -292.5596 c254.1753 -293.4648 253.834 -294.3027 252.9683 -294.6445 cf258.2964 -294.9014 m258.165 -294.9668 258.02 -295.0298 257.8779 -295.0835 C256.0273 -295.7822 L255.6484 -295.9258 L255.7661 -295.5376 L255.8203 -295.3574 255.6738 -294.7236 255.4243 -294.064 C254.7178 -292.1934 L254.6133 -291.916 254.4941 -291.6006 254.3086 -291.4644 C254.0132 -291.2461 L254.3569 -291.1167 L255.252 -290.7783 L255.5952 -290.6489 L255.5176 -291.0073 L255.4688 -291.2329 255.5879 -291.5479 255.6929 -291.8252 C256.8008 -294.7578 L256.9463 -294.7031 257.1216 -294.6367 Y257.4819 -294.5005 257.7407 -294.3403 257.9155 -293.9629 C258.1895 -293.373 L258.2939 -294.0146 L258.4043 -294.6904 L258.4282 -294.8359 L258.2964 -294.9014 Lf261.957 -293.52 m261.8838 -293.5542 L261.7173 -293.6309 261.5288 -293.7183 261.3135 -293.7988 C259.3809 -294.5186 L259.0366 -294.647 L259.1162 -294.2886 L259.1675 -294.0557 259.062 -293.7251 258.9648 -293.4629 C258.0273 -290.9478 L257.9238 -290.6694 257.8066 -290.3545 257.6216 -290.2168 C257.3276 -289.9976 L257.6714 -289.8691 L260.0059 -289 L260.1836 -288.9336 L260.2588 -289.1074 L260.4775 -289.6128 L260.6621 -290.04 L260.2251 -289.8794 L260.0098 -289.8003 259.7188 -289.8379 259.2817 -290.0005 C258.8467 -290.1626 L259.3022 -291.3857 L259.7578 -291.2153 260.2207 -291.0391 260.6533 -290.8311 C261.0127 -290.6592 L260.936 -291.0498 L260.8237 -291.6206 260.0459 -291.917 259.5669 -292.0957 C260.0981 -293.5205 L260.3125 -293.4409 260.6802 -293.3037 Y260.9805 -293.1919 261.3823 -292.9761 261.5884 -292.5854 C261.8652 -292.0596 L261.9619 -292.646 L262.0708 -293.3062 L262.0957 -293.4561 262.0952 -293.4561 V261.957 -293.52 Lf266.5415 -291.9009 m266.0659 -292.0757 L265.9683 -292.1118 L265.8828 -292.0522 L263.4307 -290.3511 262.4937 -289.7007 V262.6802 -290.2095 262.9775 -291.0195 Y263.0103 -291.1084 L263.1914 -291.6045 263.4175 -292.2227 263.7666 -292.5933 C263.9741 -292.813 L263.6904 -292.9175 L262.9194 -293.2007 L262.6357 -293.3047 L262.6509 -293.0029 L262.6816 -292.4077 262.3911 -291.6167 262.1792 -291.0391 C261.6548 -289.6113 L261.5483 -289.3213 261.418 -289.0039 261.2168 -288.9111 C260.7793 -288.7085 L261.2314 -288.5425 L261.9082 -288.2939 261.9087 -288.2935 v262.0469 -288.2427 262.1904 -288.1904 262.3936 -288.3223 c262.5059 -288.395 262.7256 -288.5645 262.98 -288.7607 c263.2178 -288.9443 263.4634 -289.1343 263.6162 -289.2397 C264.8848 -290.1128 265.4092 -290.4736 V265.2202 -289.958 264.6719 -288.4653 Y264.5063 -288.0142 264.3662 -287.8491 264.251 -287.7471 C264.001 -287.5254 L264.3145 -287.4102 L265.0117 -287.1543 L265.3208 -287.041 L265.2783 -287.3677 L265.2422 -287.6475 265.2915 -287.9585 265.4336 -288.3452 C266.418 -291.0264 L266.498 -291.2456 266.5796 -291.4453 266.6577 -291.6382 C266.7354 -291.8296 L266.5415 -291.9009 Lf271.0459 -289.4702 m270.7549 -290.0806 270.1997 -290.5566 269.4834 -290.8096 c269.1099 -290.9419 268.7925 -291.0449 268.5127 -291.1357 c268.2817 -291.2109 268.0635 -291.2822 267.8521 -291.3569 C267.5063 -291.479 L267.5913 -291.1221 L267.6445 -290.8984 267.5322 -290.5811 267.4331 -290.3013 C266.5381 -287.7715 266.5381 -287.771 V266.439 -287.4917 266.3271 -287.1743 266.1445 -287.0337 C265.8535 -286.8101 L266.1997 -286.6875 L266.5342 -286.5688 266.8716 -286.4307 267.1973 -286.2969 c267.5293 -286.1606 267.873 -286.0195 268.2212 -285.896 c268.7925 -285.6943 269.3633 -285.7158 269.8721 -285.9585 c270.4238 -286.2222 270.8574 -286.7344 271.0933 -287.4009 c271.355 -288.1411 271.3389 -288.8569 271.0459 -289.4702 cf274.5542 -289.3564 m273.1318 -289.6514 272.0537 -288.8965 271.7412 -287.3872 c271.5757 -286.5884 271.6924 -285.832 272.0693 -285.2583 c272.4077 -284.7437 272.9429 -284.3975 273.6162 -284.2583 c275.0391 -283.9639 276.1172 -284.7188 276.4297 -286.228 c276.7544 -287.8003 276.001 -289.0576 274.5542 -289.3564 cf281.2354 -288.4043 m280.6523 -288.4546 L280.2192 -288.4922 280.0059 -288.2324 279.8506 -288.0444 C278.876 -286.8818 L278.7993 -286.7896 L278.6245 -286.5781 278.5493 -286.4971 278.438 -286.4629 C278.4702 -286.8335 278.5273 -287.499 278.5273 -287.4995 C278.5532 -287.7949 278.582 -288.1304 278.7231 -288.3115 C278.9482 -288.6016 L278.5825 -288.6333 L277.5938 -288.7188 L277.2334 -288.7495 L277.3994 -288.4277 L277.54 -288.1553 277.5151 -287.8735 277.4907 -287.6011 C277.4858 -287.5459 L277.2588 -284.9146 L277.2329 -284.6187 277.2041 -284.2837 277.063 -284.1021 C276.8379 -283.812 L277.2036 -283.7803 L277.502 -283.7544 277.7964 -283.7109 278.0811 -283.6685 c278.356 -283.627 278.6401 -283.5845 278.9185 -283.5605 c279.709 -283.4922 280.2588 -283.9004 280.3193 -284.6001 c280.3672 -285.1553 280.0464 -285.6729 279.478 -286.0361 C279.8286 -286.4414 280.7144 -287.4644 280.7129 -287.4629 c280.9331 -287.7109 281.0298 -287.8057 281.3408 -288.0474 C281.7427 -288.3604 L281.2354 -288.4043 Lf*U252.7822 -293.0454 m252.5693 -292.5059 252.3252 -292.3813 251.8496 -292.5688 C251.5044 -292.7051 L251.6318 -293.0278 251.9067 -293.7246 252.1602 -294.3677 C252.1631 -294.3662 L252.6445 -294.1001 253.0991 -293.8481 252.7822 -293.0454 cfu0.4 w267.8042 -286.7705 m267.6328 -286.8311 267.4849 -286.8994 267.3604 -286.9624 C267.3765 -287.0127 267.3931 -287.0645 267.4106 -287.1143 c268.4609 -290.0815 L268.5752 -290.4048 268.5752 -290.4048 269.248 -290.1665 c269.6743 -290.0156 269.9673 -289.7793 270.1172 -289.4644 c270.3062 -289.0693 270.2856 -288.5415 270.0576 -287.8965 c269.6675 -286.7939 268.8672 -286.3945 267.8042 -286.7705 cf274.498 -285.1069 m274.2627 -284.9521 274.0034 -284.9072 273.7051 -284.9688 c272.7876 -285.1582 272.6455 -286.1221 272.8193 -286.96 c272.8901 -287.3037 273.1152 -288.1421 273.6729 -288.5083 c273.9082 -288.6631 274.1675 -288.708 274.4658 -288.6465 c274.7793 -288.5815 275.0195 -288.4248 275.1802 -288.1807 c275.4155 -287.8223 275.478 -287.2661 275.3516 -286.6548 c275.2041 -285.9395 274.8848 -285.3613 274.498 -285.1069 cf278.4014 -284.2925 m278.2578 -284.3052 L278.2598 -284.353 278.2603 -284.4019 278.2642 -284.4482 C278.3428 -285.3604 278.377 -285.7559 V278.4175 -285.7544 278.459 -285.7568 278.499 -285.7534 c278.791 -285.728 279.0059 -285.6362 279.1372 -285.48 c279.2646 -285.3281 279.3174 -285.1104 279.2935 -284.832 c279.2495 -284.3208 279.0415 -284.252 278.4014 -284.2925 CfUUu*u1 D1 w371.2427 -289.6904 m370.7349 -290.1353 369.9302 -290.855 367.876 -291.4058 c362.833 -292.7573 345.1411 -283.979 341.959 -283.084 c335.8608 -281.3691 329.5718 -279.4634 326.6499 -283.5288 c326.1665 -284.2012 324.7808 -289.6362 324.5537 -290.4526 c324.2363 -291.5962 324.7251 -291.8848 325.189 -291.5962 c325.9722 -291.1094 326.1416 -291.0244 327.603 -290.834 c329.1587 -290.6309 333.7012 -291.0879 336.2422 -291.7866 c338.7832 -292.4854 354.5488 -298.0464 356.1245 -298.7109 c361.397 -300.9341 366.1616 -300.9341 368.0034 -298.0752 c368.9878 -296.5483 371.624 -290.8975 371.9419 -289.8809 c372.2593 -288.8647 371.7515 -289.2456 371.2427 -289.6904 cf0 D336.7271 -286.3247 m336.4658 -287.9106 335.2837 -288.8003 333.7856 -288.5386 c333.0732 -288.4136 332.5337 -288.1069 332.1826 -287.627 c331.8066 -287.1118 331.6753 -286.4292 331.8037 -285.6528 c332.0645 -284.0669 333.2466 -283.1772 334.7446 -283.439 c335.4575 -283.5635 335.9966 -283.8701 336.3477 -284.3506 c336.7241 -284.8657 336.855 -285.5483 336.7271 -286.3247 cf342.249 -285.8291 m341.9243 -286.6685 L341.8545 -286.8486 L341.6665 -286.7832 L341.6455 -286.7759 L341.5313 -286.7363 L341.5098 -286.6201 L341.4492 -286.2969 341.3452 -285.9897 340.7407 -285.7783 c339.5444 -285.3594 339.0142 -286.459 338.8418 -286.9512 c338.4712 -288.0103 338.8101 -288.8384 339.7485 -289.1675 c340.3799 -289.3887 340.8252 -289.1982 340.9463 -289.1343 C341.4121 -288.8901 L341.2397 -289.3799 L341.2256 -289.4204 341.2256 -289.4199 v341.1602 -289.6084 340.9629 -289.7935 340.6982 -289.916 c340.4316 -290.04 339.8628 -290.2056 339.0557 -289.9229 c338.4502 -289.7104 337.9907 -289.3184 337.7285 -288.7891 c337.4321 -288.1929 337.4102 -287.4683 337.6655 -286.751 c337.9351 -285.9824 338.4038 -285.4248 339.0215 -285.1387 c339.5996 -284.8711 340.2783 -284.8604 340.9834 -285.1074 c341.1846 -285.1777 341.3501 -285.25 341.5254 -285.3262 c341.7046 -285.4043 341.8896 -285.4854 342.123 -285.5669 C342.3237 -285.6372 L342.249 -285.8291 Lf345.4595 -291.6753 m345.1904 -291.7939 344.6187 -291.9497 343.8169 -291.6533 c343.2148 -291.4307 342.7627 -291.0313 342.5098 -290.4971 c342.2246 -289.896 342.2153 -289.1714 342.4844 -288.459 c342.7676 -287.6958 343.2466 -287.1465 343.8696 -286.8711 c344.4526 -286.6133 345.1313 -286.6143 345.832 -286.8735 c346.0322 -286.9473 346.1963 -287.0225 346.3701 -287.1016 c346.5483 -287.1831 346.7319 -287.2666 346.9639 -287.3525 C347.1631 -287.4263 L347.085 -287.6172 L346.7451 -288.4502 L346.6714 -288.6299 L346.4844 -288.5601 L346.4639 -288.5522 L346.3511 -288.5103 L346.3311 -288.3945 L346.2769 -288.0708 346.1782 -287.7622 345.5771 -287.54 c344.3882 -287.1006 343.8379 -288.1904 343.6567 -288.6792 c343.4521 -289.2319 343.4448 -289.7578 343.6372 -290.1597 c343.7998 -290.5005 344.0977 -290.7529 344.5234 -290.9102 c345.1509 -291.1421 345.5996 -290.9595 345.7222 -290.8979 C346.1914 -290.6621 L346.0112 -291.1479 L345.9961 -291.1885 345.9966 -291.188 V345.9272 -291.375 345.7266 -291.5571 345.4595 -291.6753 cf350.731 -294.123 m349.9878 -293.8428 L349.856 -293.7935 L349.8535 -293.6563 L349.814 -291.6411 L348.5176 -291.1523 L348.1821 -291.459 347.5767 -292.0273 347.4429 -292.3809 c347.4146 -292.4556 347.3936 -292.5293 347.3765 -292.6128 C347.3296 -292.8413 L347.1045 -292.7563 L346.2441 -292.4321 L345.8481 -292.2827 L346.2075 -292.0728 L346.4302 -291.9429 l347.042 -291.5879 349.4536 -289.292 349.6309 -288.8252 C349.7056 -288.6475 L349.7803 -288.4697 L349.9663 -288.5396 L350.7783 -288.8457 L350.9189 -288.8984 L350.9121 -289.0444 L350.8906 -289.5464 L350.8296 -290.9009 350.7671 -292.3018 350.9609 -293.6123 C351.0049 -293.9116 L351.0537 -294.2446 L350.731 -294.123 Lf355.9761 -291.6743 m355.7974 -292.1382 L355.5957 -291.6763 L355.4277 -291.2915 355.312 -291.1821 354.9087 -291.0278 c354.6875 -290.9429 354.4907 -290.9316 354.3403 -290.9961 c354.2129 -291.0503 354.1162 -291.1616 354.0522 -291.3267 c353.9155 -291.6826 354.1519 -291.9746 354.5498 -292.4224 c354.9648 -292.8887 355.481 -293.4697 355.1792 -294.252 c354.8223 -295.1777 353.6978 -295.3818 352.8169 -295.0439 c352.46 -294.9072 351.9507 -294.5874 351.6577 -294.3159 C351.5571 -294.2227 L351.6055 -294.0977 L351.8779 -293.3916 L352.1016 -292.8101 L352.2676 -293.4165 L352.3608 -293.7563 352.4766 -294.1797 353.1045 -294.4204 c353.4531 -294.5542 353.8916 -294.5273 354.0752 -294.0503 c354.2314 -293.6445 353.9883 -293.3242 353.5684 -292.8447 c353.1509 -292.3677 352.6777 -291.8271 352.9639 -291.0854 c353.3203 -290.1602 354.2695 -290.0493 355.0522 -290.3491 c355.2368 -290.4199 355.416 -290.5005 355.5889 -290.5781 c355.7622 -290.6563 355.9258 -290.73 356.0942 -290.7944 C356.2866 -290.8682 L356.2148 -291.0547 L355.9761 -291.6743 Lf361.479 -293.3687 m361.2813 -293.5039 361.1504 -293.8145 361.0347 -294.0894 C359.9941 -296.5635 L359.8848 -296.8232 359.749 -297.146 359.7944 -297.3662 C359.8667 -297.7129 L359.5259 -297.5903 L358.7017 -297.2935 L358.4854 -297.2153 L358.5845 -297.0156 L358.6025 -296.979 358.6265 -296.9307 V358.1758 -297.0093 357.7197 -296.9619 357.2661 -296.7729 c356.0366 -296.2607 356.0581 -295.4399 356.2939 -294.8369 C357.2686 -292.5205 L357.3838 -292.2461 357.5146 -291.9351 357.4727 -291.6997 C357.4082 -291.3413 L357.752 -291.4844 L358.6611 -291.8633 L359.0044 -292.0063 L358.7036 -292.2119 L358.5054 -292.3477 358.3745 -292.6587 358.2588 -292.9331 C357.4507 -294.8545 357.4526 -294.8496 v357.1914 -295.5254 357.3394 -295.9219 357.9482 -296.1753 c358.5483 -296.4258 358.9175 -296.2227 359.2661 -295.4502 c359.3115 -295.3511 359.3594 -295.2505 359.4063 -295.1533 c359.4756 -295.0073 359.5479 -294.8564 359.6094 -294.71 C360.0444 -293.6768 360.0444 -293.6758 V360.1597 -293.4019 360.2905 -293.0913 360.248 -292.856 C360.1841 -292.4976 L360.5273 -292.6406 L361.437 -293.0195 L361.7808 -293.1626 L361.479 -293.3687 Lf*U*u1 D322.8491 -293.6079 m319.292 -296.7837 310.0601 -299.3247 305.063 -299.3247 c299.981 -299.3247 290.749 -296.7837 287.2764 -293.6079 c285.9478 -292.3921 285.9214 -293.0571 285.9634 -294.4546 c285.9995 -295.6396 285.9556 -300.5952 285.9556 -301.2305 c285.9556 -302.7974 287.9966 -304.8301 289.3091 -305.4653 c290.6221 -306.1006 297.6519 -309.5308 305.063 -309.4883 c312.4741 -309.4463 319.5034 -306.1006 320.8164 -305.4653 c322.1294 -304.8301 324.1704 -302.7974 324.1704 -301.2305 c324.1704 -300.5952 324.126 -295.6396 324.1621 -294.4546 c324.2046 -293.0571 324.1924 -292.4087 322.8491 -293.6079 cf0 D300.2559 -301.6123 m300.084 -302.2539 L299.9551 -302.7339 L299.7158 -302.2983 L299.5166 -301.9351 299.3945 -301.8398 298.9897 -301.7314 c298.6934 -301.6523 298.3145 -301.6558 298.1895 -302.1235 c298.0908 -302.4917 298.3477 -302.7554 298.7754 -303.1548 c299.2217 -303.5718 299.7769 -304.0903 299.5601 -304.9004 c299.459 -305.2783 299.2241 -305.5825 298.8809 -305.7808 c298.4521 -306.0283 297.8799 -306.0913 297.3501 -305.9497 c296.9907 -305.8535 296.4673 -305.5928 296.1587 -305.3564 C296.0522 -305.2749 L296.0869 -305.146 L296.2827 -304.4146 L296.4438 -303.8125 L296.6626 -304.3965 L296.7852 -304.7231 296.9375 -305.1299 297.5684 -305.2993 c297.7959 -305.3599 298.0098 -305.3423 298.1704 -305.2495 c298.3179 -305.1646 298.4194 -305.021 298.4722 -304.8237 c298.585 -304.4033 298.3184 -304.1123 297.8667 -303.6836 c297.417 -303.2573 296.9072 -302.7734 297.1128 -302.0054 c297.3691 -301.0479 298.2773 -300.8315 299.063 -301.042 c299.249 -301.0918 299.4302 -301.1514 299.6055 -301.2095 c299.7798 -301.2676 299.9453 -301.3223 300.1143 -301.3677 C300.3076 -301.4194 L300.2559 -301.6123 Lf303.0078 -302.2192 m302.8589 -302.3945 302.8154 -302.728 302.7764 -303.0229 C302.4282 -305.6851 302.4282 -305.6865 v302.3896 -305.9805 302.3467 -306.3135 302.4453 -306.5215 C302.6035 -306.8525 L302.2393 -306.8052 L301.2905 -306.6812 L300.9263 -306.6338 L301.1641 -306.354 L301.313 -306.1787 301.3564 -305.8457 301.395 -305.5518 C301.395 -305.5518 301.3955 -305.5503 V301.7432 -302.8877 L301.7817 -302.5938 301.8257 -302.2598 301.7266 -302.0518 C301.5688 -301.7202 L301.9326 -301.7676 L302.8813 -301.8916 L303.2456 -301.9395 L303.0078 -302.2192 Lf308.6416 -306.7661 m308.1362 -306.8057 L308.0327 -306.814 L307.9668 -306.7344 L306.0625 -304.4355 305.3359 -303.5576 V305.376 -304.0601 305.4468 -304.9575 Y305.4546 -305.0522 L305.4956 -305.5791 305.5469 -306.2344 305.7832 -306.6855 C305.9233 -306.9531 L305.6221 -306.9771 L304.8037 -307.042 L304.502 -307.0659 L304.5986 -306.7793 L304.7881 -306.2148 304.7217 -305.3745 304.6729 -304.7612 C304.5522 -303.2451 L304.5283 -302.9375 304.4878 -302.5972 304.3193 -302.4531 C303.9521 -302.1406 L304.4326 -302.1021 L305.1514 -302.0449 L305.2983 -302.0332 305.4502 -302.021 305.6108 -302.2031 c305.6992 -302.3037 305.8652 -302.5259 306.0576 -302.7837 c306.2368 -303.0244 306.4229 -303.2729 306.541 -303.4155 C307.5273 -304.5977 307.9355 -305.0864 V307.8794 -304.3848 307.7661 -302.9541 307.7661 -302.9546 C307.728 -302.4751 307.6377 -302.2788 307.5542 -302.1494 C307.373 -301.8687 L307.7061 -301.8423 L308.4463 -301.7832 L308.7744 -301.7573 L308.6455 -302.0605 L308.5352 -302.3208 308.499 -302.6333 308.5317 -303.0439 C308.7578 -305.8906 308.7578 -305.8901 V308.7764 -306.1221 308.8003 -306.3369 308.8242 -306.5444 C308.8472 -306.7495 L308.6416 -306.7661 Lf313.8076 -305.4829 m313.7285 -305.5103 L313.5562 -305.5708 313.3608 -305.6392 313.1401 -305.6978 C311.147 -306.229 L310.792 -306.3237 L310.9053 -305.9746 L310.979 -305.7471 310.9058 -305.4082 310.834 -305.1382 C310.1431 -302.5444 310.1426 -302.5439 V310.0664 -302.2568 309.9795 -301.9321 309.8091 -301.7773 C309.5376 -301.5313 L309.8921 -301.4365 L312.2993 -300.7954 L312.4824 -300.7466 L312.5405 -300.9268 L312.71 -301.4507 L312.8535 -301.894 L312.4336 -301.6924 L312.2266 -301.5928 311.9331 -301.6016 311.4824 -301.7217 C311.0342 -301.8413 L311.3696 -303.1025 L311.8408 -302.9766 312.3193 -302.8452 312.7681 -302.6807 C313.1421 -302.5439 L313.0283 -302.9253 L312.8618 -303.4819 312.0596 -303.7026 311.5649 -303.835 C311.9565 -305.3042 L312.1914 -305.2417 312.5566 -305.1445 Y312.8667 -305.062 313.2871 -304.8862 313.5298 -304.5166 C313.8564 -304.02 L313.896 -304.6128 L313.9409 -305.2808 L313.9512 -305.4326 L313.8076 -305.4829 Lf*U*u0.4 w335.5366 -286.3198 m335.3975 -287.1655 334.9102 -288.0098 333.9595 -287.8438 c332.7329 -287.6294 332.9399 -285.9854 332.9937 -285.6577 c333.1328 -284.812 333.6201 -283.9673 334.5708 -284.1338 c334.8799 -284.1875 335.1123 -284.3267 335.2817 -284.5586 c335.6831 -285.1084 335.5938 -285.9731 335.5366 -286.3198 cf*Uu1 w349.0425 -290.6182 m349.8057 -290.9058 L349.8174 -290.5801 349.8369 -290.0557 349.8472 -289.7686 C349.0425 -290.6182 LfUUUu304.9482 -190.249 m304.9502 -190.249 304.9521 -190.2495 304.9536 -190.2495 c304.9556 -190.2495 304.9575 -190.249 304.959 -190.249 C304.9482 -190.249 Lf*u1 D317.6074 -204.7617 m317.6372 -203.2637 L321.4463 -199.8779 320.5454 -196.5366 320.1992 -194.8071 c319.0142 -188.8818 309.5195 -189.2202 307.4561 -193.3682 C307.4697 -192.7705 L307.4697 -191.3794 306.3438 -190.2524 304.9536 -190.2495 c303.564 -190.2524 302.4375 -191.3794 302.4375 -192.7705 C302.4512 -193.3682 L300.3882 -189.2202 290.8936 -188.8818 289.708 -194.8071 c289.3623 -196.5366 288.459 -199.8779 292.2686 -203.2637 C292.2686 -204.7617 L291.8315 -204.7617 291.0825 -205.1982 291.0825 -205.8223 C291.0425 -206.9863 292.3857 -207.0981 V293.7832 -205.186 L297.3662 -205.186 L295.9536 -207.1196 L298.6099 -207.1196 L300.0225 -205.186 L303.606 -205.186 L302.1934 -207.1196 L305.3145 -207.1196 L306.7271 -205.186 L310.3101 -205.186 L308.8975 -207.1196 L311.6187 -207.1196 L313.0313 -205.186 L316.6147 -205.186 L315.2021 -207.1196 L317.3242 -207.1196 L318.9434 -207.0933 318.856 -206.0098 Y318.856 -205.3086 318.3086 -204.7617 317.6074 -204.7617 Cf0 D302.6738 -198.9551 m301.8271 -201.6636 299.1182 -202.0869 297.9331 -200.2246 c297.7188 -199.8877 297.7588 -198.0239 298.3936 -197.2197 c299.0283 -196.4155 300.1289 -197.0503 Y300.6367 -195.8232 299.4517 -195.188 V298.3511 -194.7227 297.9277 -195.3574 V298.0518 -194.0566 L298.0083 -193.4619 297.5361 -193.0161 297.0005 -193.0645 c296.4595 -193.1138 296.0703 -193.6377 296.1143 -194.2324 C296.2666 -195.3574 L295.8438 -194.7227 294.7432 -195.188 Y293.5581 -195.8232 294.0659 -197.0503 Y295.1665 -196.4155 295.8013 -197.2197 v296.436 -198.0239 295.5474 -199.2935 295.2085 -199.5054 c294.8701 -199.7168 294.0923 -200.168 293.4468 -199.8862 c292.7148 -199.5669 292.0503 -198.5674 291.8384 -197.939 c291.5317 -197.0303 291.0767 -194.0454 294.4736 -192.7295 c297.394 -191.5986 300.9805 -192.0986 302.6738 -196.6694 c302.6768 -196.6782 301.2881 -195.9077 Y301.2344 -199.6323 L302.6738 -198.9551 Lf316.4609 -199.8862 m315.6958 -200.1436 315.0376 -199.7168 314.6992 -199.5054 c314.3604 -199.2935 313.4717 -198.0239 314.1064 -197.2197 c314.7412 -196.4155 315.8418 -197.0503 Y316.3496 -195.8232 315.1646 -195.188 V314.064 -194.7227 313.6406 -195.3574 V313.7935 -194.2324 L313.8369 -193.6377 313.4482 -193.1138 312.9067 -193.0645 c312.3716 -193.0161 311.8994 -193.4619 311.8555 -194.0566 C311.9795 -195.3574 L311.5562 -194.7227 310.4561 -195.188 Y309.271 -195.8232 309.7788 -197.0503 Y310.8789 -196.4155 311.5142 -197.2197 v312.1489 -198.0239 312.1885 -199.8877 311.9746 -200.2246 c310.7891 -202.0869 308.0806 -201.6636 307.2339 -198.9551 C308.6729 -199.6323 L308.6812 -195.9077 L307.231 -196.6782 307.2339 -196.6694 v308.9268 -192.0986 312.5137 -191.5986 315.4341 -192.7295 c318.8311 -194.0454 318.3755 -197.0303 318.0693 -197.939 c317.8574 -198.5674 317.2393 -199.624 316.4609 -199.8862 cf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_pattern_AI5 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF